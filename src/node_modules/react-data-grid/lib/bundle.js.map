{"version":3,"file":"bundle.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/style/cell.ts","../src/style/core.ts","../src/style/grouprow.ts","../src/style/header.ts","../src/style/row.ts","../src/hooks/useClickOutside.ts","../src/hooks/useGridDimensions.ts","../src/hooks/useFocusRef.ts","../src/formatters/SelectCellFormatter.tsx","../src/formatters/ValueFormatter.tsx","../src/formatters/ToggleGroupFormatter.tsx","../src/utils/domUtils.ts","../src/Columns.tsx","../src/hooks/useViewportColumns.ts","../src/hooks/useViewportRows.ts","../src/hooks/useLatestFunc.ts","../src/headerCells/SortableHeaderCell.tsx","../src/utils/keyboardUtils.ts","../src/utils/selectedCellUtils.ts","../src/utils/index.ts","../src/HeaderCell.tsx","../src/HeaderRow.tsx","../src/FilterRow.tsx","../src/Cell.tsx","../src/editors/EditorContainer.tsx","../src/EditCell.tsx","../src/Row.tsx","../src/GroupCell.tsx","../src/GroupRow.tsx","../src/SummaryCell.tsx","../src/SummaryRow.tsx","../src/DataGrid.tsx","../src/editors/TextEditor.tsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","import { css } from '@linaria/core';\n\nexport const cell = css`\n  contain: strict;\n  contain: size layout style paint;\n  padding: 0 8px;\n  border-right: 1px solid var(--border-color);\n  border-bottom: 1px solid var(--border-color);\n  background-color: inherit;\n\n  white-space: nowrap;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nexport const cellClassname = `rdg-cell ${cell}`;\n\nconst cellFrozen = css`\n  position: sticky;\n  // Should have a higher value than 0 to show up above unfrozen cells\n  z-index: 1;\n`;\n\nexport const cellFrozenClassname = `rdg-cell-frozen ${cellFrozen}`;\n\nexport const cellFrozenLast = css`\n  box-shadow: 2px 0 5px -2px rgba(136, 136, 136, .3);\n`;\n\nexport const cellFrozenLastClassname = `rdg-cell-frozen-last ${cellFrozenLast}`;\n\nconst cellSelected = css`\n  box-shadow: inset 0 0 0 2px var(--selection-color);\n`;\n\nexport const cellSelectedClassname = `rdg-cell-selected ${cellSelected}`;\n","import { css } from '@linaria/core';\nimport { row } from './row';\n\nconst lightTheme = `\n  --color: #000;\n  --border-color: #ddd;\n  --summary-border-color: #aaa;\n  --background-color: hsl(0deg 0% 100%);\n  --header-background-color: hsl(0deg 0% 97.5%);\n  --row-hover-background-color: hsl(0deg 0% 96%);\n  --row-selected-background-color: hsl(207deg 76% 92%);\n  --row-selected-hover-background-color: hsl(207deg 76% 88%);\n\n  --checkbox-color: hsl(207deg 100% 29%);\n  --checkbox-focus-color: hsl(207deg 100% 69%);\n  --checkbox-disabled-border-color: #ccc;\n  --checkbox-disabled-background-color: #ddd;\n`;\n\nconst darkTheme = `\n  --color: #ddd;\n  --border-color: #444;\n  --summary-border-color: #555;\n  --background-color: hsl(0deg 0% 13%);\n  --header-background-color: hsl(0deg 0% 10.5%);\n  --row-hover-background-color: hsl(0deg 0% 9%);\n  --row-selected-background-color: hsl(207deg 76% 42%);\n  --row-selected-hover-background-color: hsl(207deg 76% 38%);\n\n  --checkbox-color: hsl(207deg 100% 79%);\n  --checkbox-focus-color: hsl(207deg 100% 89%);\n  --checkbox-disabled-border-color: #000;\n  --checkbox-disabled-background-color: #333;\n`;\n\nconst root = css`\n  ${lightTheme}\n  --selection-color: #66afe9;\n  --font-size: 14px;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\n  // We set a stacking context so internal elements don't render on top of external components.\n  contain: strict;\n  contain: size layout style paint;\n  content-visibility: auto;\n  height: 350px;\n  border: 1px solid var(--border-color);\n  box-sizing: border-box;\n  overflow: auto;\n  user-select: none;\n  background-color: var(--background-color);\n  color: var(--color);\n  font-size: var(--font-size);\n\n  // set stacking context in safari\n  @supports not (contain: strict) {\n    position: relative;\n    z-index: 0;\n  }\n\n  *,\n  *::before,\n  *::after {\n    box-sizing: inherit;\n  }\n\n  &.rdg-dark {\n    ${darkTheme}\n  }\n\n  @media (prefers-color-scheme: dark) {\n    &:not(.rdg-light) {\n      ${darkTheme}\n    }\n  }\n`;\n\nexport const rootClassname = `rdg ${root}`;\n\nconst focusSink = css`\n  position: sticky;\n  top: 0;\n  left: 0;\n  height: 0;\n  width: 0;\n  outline: 0;\n`;\n\nexport const focusSinkClassname = `rdg-focus-sink ${focusSink}`;\n\nconst viewportDragging = css`\n  &.${row} {\n    cursor: move;\n  }\n`;\n\nexport const viewportDraggingClassname = `rdg-viewport-dragging ${viewportDragging}`;\n","import { css } from '@linaria/core';\nimport { rowSelected } from './row';\nimport { cell, cellFrozenLast } from './cell';\n\nconst groupRow = css`\n  &:not(.${rowSelected}) {\n    background-color: var(--header-background-color);\n  }\n\n  > .${cell}:not(:last-child):not(.${cellFrozenLast}) {\n    border-right: none;\n  }\n`;\n\nexport const groupRowClassname = `rdg-group-row ${groupRow}`;\n\nconst groupRowSelected = css`\n  &::after {\n    content: \"\";\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    box-shadow: inset 0 0 0 2px var(--selection-color);\n    pointer-events: none;\n    z-index: 2;\n  }\n\n  > .${cell}:first-child {\n    // preserve left border on the first frozen cell after scrolling to the right\n    box-shadow: inset 2px 0 0 0 var(--selection-color);\n  }\n`;\n\n// TODO: rename class\nexport const groupRowSelectedClassname = `rdg-group-row-selected ${groupRowSelected}`;\n","import { css } from '@linaria/core';\n\nconst headerRowAndFilterRow = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-columns: var(--template-columns);\n  width: var(--row-width);\n  position: sticky;\n  background-color: var(--header-background-color);\n  font-weight: bold;\n  z-index: 3;\n`;\n\nconst headerRow = css`\n  grid-template-rows: var(--header-row-height);\n  height: var(--header-row-height); // needed on Firefox\n  line-height: var(--header-row-height);\n  top: 0;\n  touch-action: none;\n`;\n\nexport const headerRowClassname = `rdg-header-row ${headerRowAndFilterRow} ${headerRow}`;\n\nconst filterRow = css`\n  grid-template-rows: var(--filter-row-height);\n  height: var(--filter-row-height); // needed on Firefox\n  line-height: var(--filter-row-height);\n  top: var(--header-row-height);\n`;\n\nexport const filterRowClassname = `rdg-filter-row ${headerRowAndFilterRow} ${filterRow}`;\n","import { css } from '@linaria/core';\nimport { cell } from './cell';\n\nexport const row = css`\n  contain: strict;\n  contain: size layout style paint;\n  display: grid;\n  grid-template-rows: var(--row-height);\n  grid-template-columns: var(--template-columns);\n  position: absolute;\n  left: 0;\n  width: var(--row-width);\n  height: var(--row-height); // needed on Firefox\n  line-height: var(--row-height);\n  background-color: var(--background-color);\n\n  &:hover {\n    background-color: var(--row-hover-background-color);\n  }\n`;\n\nexport const rowClassname = `rdg-row ${row}`;\n\nexport const rowSelected = css`\n  background-color: var(--row-selected-background-color);\n\n  &:hover {\n    background-color: var(--row-selected-hover-background-color);\n  }\n`;\n\nexport const rowSelectedClassname = `rdg-row-selected ${rowSelected}`;\n\nconst summaryRow = css`\n  position: sticky;\n  z-index: 3;\n  grid-template-rows: var(--summary-row-height);\n  height: var(--summary-row-height); // needed on Firefox\n  line-height: var(--summary-row-height);\n\n  > .${cell} {\n    border-top: 2px solid var(--summary-border-color);\n  }\n`;\n\nexport const summaryRowClassname = `rdg-summary-row ${summaryRow}`;\n","import { useRef, useEffect } from 'react';\n\n/**\n * Detecting outside click on a react component is surprisingly hard.\n * A general approach is to have a global click handler on the document\n * which checks if the click target is inside the editor container or\n * not using editorContainer.contains(e.target). This approach works well\n * until portals are used for editors. Portals render children into a DOM\n * node that exists outside the DOM hierarchy of the parent component so\n * editorContainer.contains(e.target) does not work. Here are some examples\n * of the DOM structure with different types of editors\n *\n *\n * SimpleEditor for example Texbox (No Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        <div simple-editor>..</div>\n *      </div>\n *   </div>\n *\n * ComplexEditor for example Modals (using Portals)\n *   <div data-grid>..</div>\n *   <div portal-created-by-the-grid-for-editors>\n *      <div editor-container>\n *        // Nothing here\n *      </div>\n *   </div>\n *   <div portal-created-by-the-editor>\n *     <div complex-editor>..</div>\n *   </div>\n *\n *\n * One approach to detect outside click is to use synthetic event bubbling through\n * portals. An event fired from inside a portal will propagate to ancestors\n * in the containing React tree, even if those elements are not ancestors\n * in the DOM tree. This means a click handler can be attached on the window\n * and on the editor container. The editor container can set a flag to notify\n * that the click was inside the editor and the window click handler can use\n * this flag to call onClickOutside. This approach however has a few caveats\n * - Click handler on the window is set using window.addEventListener\n * - Click handler on the editor container is set using onClick prop\n *\n * This means if a child component inside the editor calls e.stopPropagation\n * then the click handler on the editor container will not be called whereas\n * the document click handler will be called.\n * https://github.com/facebook/react/issues/12518\n *\n * To solve this issue onClickCapture event is used.\n */\n\nexport function useClickOutside(onClick: () => void) {\n  const frameRequestRef = useRef<number | undefined>();\n\n  function cancelAnimationFrameRequest() {\n    if (typeof frameRequestRef.current === 'number') {\n      cancelAnimationFrame(frameRequestRef.current);\n      frameRequestRef.current = undefined;\n    }\n  }\n\n  // We need to prevent the `useEffect` from cleaning up between re-renders,\n  // as `handleDocumentClick` might otherwise miss valid click events.\n  // To that end we instead access the latest `onClick` prop via a ref.\n  const onClickRef = useRef((): void => {\n    throw new Error('Cannot call an event handler while rendering.');\n  });\n\n  useEffect(() => {\n    onClickRef.current = onClick;\n  });\n\n  useEffect(() => {\n    function onOutsideClick() {\n      frameRequestRef.current = undefined;\n      onClickRef.current();\n    }\n\n    function onWindowCaptureClick() {\n      cancelAnimationFrameRequest();\n      frameRequestRef.current = requestAnimationFrame(onOutsideClick);\n    }\n\n    window.addEventListener('click', onWindowCaptureClick, { capture: true });\n\n    return () => {\n      window.removeEventListener('click', onWindowCaptureClick, { capture: true });\n      cancelAnimationFrameRequest();\n    };\n  }, []);\n\n  return cancelAnimationFrameRequest;\n}\n","import { useRef, useState, useLayoutEffect } from 'react';\n\nexport function useGridDimensions(): [ref: React.RefObject<HTMLDivElement>, width: number, height: number] {\n  const gridRef = useRef<HTMLDivElement>(null);\n  const [gridWidth, setGridWidth] = useState(1);\n  const [gridHeight, setGridHeight] = useState(1);\n\n  useLayoutEffect(() => {\n    const { ResizeObserver } = window;\n\n    // don't break in jest/jsdom and browsers that don't support ResizeObserver\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (ResizeObserver == null) return;\n\n    const resizeObserver = new ResizeObserver(() => {\n      // Get dimensions without scrollbars.\n      // The dimensions given by the callback entries in Firefox do not substract the scrollbar sizes.\n      const { clientWidth, clientHeight } = gridRef.current!;\n      setGridWidth(clientWidth);\n      setGridHeight(clientHeight);\n    });\n\n    resizeObserver.observe(gridRef.current!);\n\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  return [gridRef, gridWidth, gridHeight];\n}\n","import { useRef, useLayoutEffect } from 'react';\n\nexport function useFocusRef<T extends HTMLOrSVGElement>(isCellSelected: boolean | undefined) {\n  const ref = useRef<T>(null);\n  useLayoutEffect(() => {\n    if (!isCellSelected) return;\n    ref.current?.focus({ preventScroll: true });\n  }, [isCellSelected]);\n\n  return ref;\n}\n","import clsx from 'clsx';\nimport { css } from '@linaria/core';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst checkboxLabel = css`\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  margin-right: 1px; // align checkbox in row group cell\n`;\n\nconst checkboxLabelClassname = `rdg-checkbox-label ${checkboxLabel}`;\n\nconst checkboxInput = css`\n  all: unset;\n  width: 0;\n  margin: 0;\n`;\n\nconst checkboxInputClassname = `rdg-checkbox-input ${checkboxInput}`;\n\nconst checkbox = css`\n  content: '';\n  width: 20px;\n  height: 20px;\n  border: 2px solid var(--border-color);\n  background-color: var(--background-color);\n\n  .${checkboxInput}:checked + & {\n    background-color: var(--checkbox-color);\n    box-shadow: inset 0px 0px 0px 4px var(--background-color);\n  }\n\n  .${checkboxInput}:focus + & {\n    border-color: var(--checkbox-focus-color);\n  }\n`;\n\nconst checkboxClassname = `rdg-checkbox ${checkbox}`;\n\nconst checkboxLabelDisabled = css`\n  cursor: default;\n\n  .${checkbox} {\n    border-color: var(--checkbox-disabled-border-color);\n    background-color: var(--checkbox-disabled-background-color);\n  }\n`;\n\nconst checkboxLabelDisabledClassname = `rdg-checkbox-label-disabled ${checkboxLabelDisabled}`;\n\ntype SharedInputProps = Pick<React.InputHTMLAttributes<HTMLInputElement>,\n  | 'disabled'\n  | 'tabIndex'\n  | 'onClick'\n  | 'aria-label'\n  | 'aria-labelledby'\n>;\n\ninterface SelectCellFormatterProps extends SharedInputProps {\n  isCellSelected?: boolean;\n  value: boolean;\n  onChange: (value: boolean, isShiftClick: boolean) => void;\n}\n\nexport function SelectCellFormatter({\n  value,\n  tabIndex,\n  isCellSelected,\n  disabled,\n  onClick,\n  onChange,\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy\n}: SelectCellFormatterProps) {\n  const inputRef = useFocusRef<HTMLInputElement>(isCellSelected);\n\n  function handleChange(e: React.ChangeEvent<HTMLInputElement>) {\n    onChange(e.target.checked, (e.nativeEvent as MouseEvent).shiftKey);\n  }\n\n  return (\n    <label className={clsx(checkboxLabelClassname, { [checkboxLabelDisabledClassname]: disabled })}>\n      <input\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledBy}\n        tabIndex={tabIndex}\n        ref={inputRef}\n        type=\"checkbox\"\n        className={checkboxInputClassname}\n        disabled={disabled}\n        checked={value}\n        onChange={handleChange}\n        onClick={onClick}\n      />\n      <div className={checkboxClassname} />\n    </label>\n  );\n}\n","import type { FormatterProps } from '../types';\n\nexport function ValueFormatter<R, SR>(props: FormatterProps<R, SR>) {\n  try {\n    return <>{props.row[props.column.key as keyof R]}</>;\n  } catch {\n    return null;\n  }\n}\n","import { css } from '@linaria/core';\nimport type { GroupFormatterProps } from '../types';\nimport { useFocusRef } from '../hooks/useFocusRef';\n\nconst groupCellContent = css`\n  outline: none;\n`;\n\nconst groupCellContentClassname = `rdg-group-cell-content ${groupCellContent}`;\n\nconst caret = css`\n  margin-left: 4px;\n  stroke: currentColor;\n  stroke-width: 1.5px;\n  fill: transparent;\n  vertical-align: middle;\n\n  > path {\n    transition: d .1s;\n  }\n`;\n\nconst caretClassname = `rdg-caret ${caret}`;\n\nexport function ToggleGroupFormatter<R, SR>({\n  groupKey,\n  isExpanded,\n  isCellSelected,\n  toggleGroup\n}: GroupFormatterProps<R, SR>) {\n  const cellRef = useFocusRef<HTMLSpanElement>(isCellSelected);\n\n  function handleKeyDown({ key }: React.KeyboardEvent<HTMLSpanElement>) {\n    if (key === 'Enter') {\n      toggleGroup();\n    }\n  }\n\n  const d = isExpanded ? 'M1 1 L 7 7 L 13 1' : 'M1 7 L 7 1 L 13 7';\n\n  return (\n    <span\n      ref={cellRef}\n      className={groupCellContentClassname}\n      tabIndex={-1}\n      onKeyDown={handleKeyDown}\n    >\n      {groupKey}\n      <svg viewBox=\"0 0 14 8\" width=\"14\" height=\"8\" className={caretClassname}>\n        <path d={d} />\n      </svg>\n    </span>\n  );\n}\n","export function stopPropagation(event: React.SyntheticEvent) {\n  event.stopPropagation();\n}\n","import { SelectCellFormatter } from './formatters';\nimport type { Column } from './types';\nimport { stopPropagation } from './utils/domUtils';\n\nexport const SELECT_COLUMN_KEY = 'select-row';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const SelectColumn: Column<any, any> = {\n  key: SELECT_COLUMN_KEY,\n  name: '',\n  width: 35,\n  maxWidth: 35,\n  resizable: false,\n  sortable: false,\n  frozen: true,\n  headerRenderer(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select All\"\n        value={props.allRowsSelected}\n        onChange={props.onAllRowsSelectionChange}\n      />\n    );\n  },\n  formatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onClick={stopPropagation}\n        onChange={props.onRowSelectionChange}\n      />\n    );\n  },\n  groupFormatter(props) {\n    return (\n      <SelectCellFormatter\n        aria-label=\"Select Group\"\n        tabIndex={-1}\n        isCellSelected={props.isCellSelected}\n        value={props.isRowSelected}\n        onChange={props.onRowSelectionChange}\n        // Stop propagation to prevent row selection\n        onClick={stopPropagation}\n      />\n    );\n  }\n};\n","import { useMemo } from 'react';\n\nimport type { CalculatedColumn, Column, ColumnMetric } from '../types';\nimport type { DataGridProps } from '../DataGrid';\nimport { ValueFormatter, ToggleGroupFormatter } from '../formatters';\nimport { SELECT_COLUMN_KEY } from '../Columns';\n\ninterface ViewportColumnsArgs<R, SR> extends Pick<DataGridProps<R, SR>, 'defaultColumnOptions'> {\n  rawColumns: readonly Column<R, SR>[];\n  rawGroupBy?: readonly string[];\n  viewportWidth: number;\n  scrollLeft: number;\n  columnWidths: ReadonlyMap<string, number>;\n  enableVirtualization: boolean;\n}\n\nexport function useViewportColumns<R, SR>({\n  rawColumns,\n  columnWidths,\n  viewportWidth,\n  scrollLeft,\n  defaultColumnOptions,\n  rawGroupBy,\n  enableVirtualization\n}: ViewportColumnsArgs<R, SR>) {\n  const minColumnWidth = defaultColumnOptions?.minWidth ?? 80;\n  const defaultFormatter = defaultColumnOptions?.formatter ?? ValueFormatter;\n  const defaultSortable = defaultColumnOptions?.sortable ?? false;\n  const defaultResizable = defaultColumnOptions?.resizable ?? false;\n\n  const { columns, lastFrozenColumnIndex, groupBy } = useMemo(() => {\n    // Filter rawGroupBy and ignore keys that do not match the columns prop\n    const groupBy: string[] = [];\n    let lastFrozenColumnIndex = -1;\n\n    const columns = rawColumns.map(rawColumn => {\n      const rowGroup = rawGroupBy?.includes(rawColumn.key) ?? false;\n      // eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing\n      const frozen = rowGroup || rawColumn.frozen || false;\n\n      const column: CalculatedColumn<R, SR> = {\n        ...rawColumn,\n        idx: 0,\n        frozen,\n        isLastFrozenColumn: false,\n        rowGroup,\n        sortable: rawColumn.sortable ?? defaultSortable,\n        resizable: rawColumn.resizable ?? defaultResizable,\n        formatter: rawColumn.formatter ?? defaultFormatter\n      };\n\n      if (rowGroup) {\n        column.groupFormatter ??= ToggleGroupFormatter;\n      }\n\n      if (frozen) {\n        lastFrozenColumnIndex++;\n      }\n\n      return column;\n    });\n\n    columns.sort(({ key: aKey, frozen: frozenA }, { key: bKey, frozen: frozenB }) => {\n      // Sort select column first:\n      if (aKey === SELECT_COLUMN_KEY) return -1;\n      if (bKey === SELECT_COLUMN_KEY) return 1;\n\n      // Sort grouped columns second, following the groupBy order:\n      if (rawGroupBy?.includes(aKey)) {\n        if (rawGroupBy.includes(bKey)) {\n          return rawGroupBy.indexOf(aKey) - rawGroupBy.indexOf(bKey);\n        }\n        return -1;\n      }\n      if (rawGroupBy?.includes(bKey)) return 1;\n\n      // Sort frozen columns third:\n      if (frozenA) {\n        if (frozenB) return 0;\n        return -1;\n      }\n      if (frozenB) return 1;\n\n      // Sort other columns last:\n      return 0;\n    });\n\n    columns.forEach((column, idx) => {\n      column.idx = idx;\n\n      if (column.rowGroup) {\n        groupBy.push(column.key);\n      }\n    });\n\n    if (lastFrozenColumnIndex !== -1) {\n      columns[lastFrozenColumnIndex].isLastFrozenColumn = true;\n    }\n\n    return {\n      columns,\n      lastFrozenColumnIndex,\n      groupBy\n    };\n  }, [rawColumns, defaultFormatter, defaultResizable, defaultSortable, rawGroupBy]);\n\n  const { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics } = useMemo(() => {\n    const columnMetrics = new Map<CalculatedColumn<R, SR>, ColumnMetric>();\n    let left = 0;\n    let totalColumnWidth = 0;\n    let totalFrozenColumnWidth = 0;\n    let templateColumns = '';\n    let allocatedWidth = 0;\n    let unassignedColumnsCount = 0;\n\n    for (const column of columns) {\n      let width = getSpecifiedWidth(column, columnWidths, viewportWidth);\n\n      if (width === undefined) {\n        unassignedColumnsCount++;\n      } else {\n        width = clampColumnWidth(width, column, minColumnWidth);\n        allocatedWidth += width;\n        columnMetrics.set(column, { width, left: 0 });\n      }\n    }\n\n    const unallocatedWidth = viewportWidth - allocatedWidth;\n    const unallocatedColumnWidth = unallocatedWidth / unassignedColumnsCount;\n\n    for (const column of columns) {\n      let width;\n      if (columnMetrics.has(column)) {\n        const columnMetric = columnMetrics.get(column)!;\n        columnMetric.left = left;\n        ({ width } = columnMetric);\n      } else {\n        width = clampColumnWidth(unallocatedColumnWidth, column, minColumnWidth);\n        columnMetrics.set(column, { width, left });\n      }\n      totalColumnWidth += width;\n      left += width;\n      templateColumns += `${width}px `;\n    }\n\n    if (lastFrozenColumnIndex !== -1) {\n      const columnMetric = columnMetrics.get(columns[lastFrozenColumnIndex])!;\n      totalFrozenColumnWidth = columnMetric.left + columnMetric.width;\n    }\n\n    const layoutCssVars: Record<string, string> = {\n      '--template-columns': templateColumns\n    };\n\n    for (let i = 0; i <= lastFrozenColumnIndex; i++) {\n      const column = columns[i];\n      layoutCssVars[`--frozen-left-${column.key}`] = `${columnMetrics.get(column)!.left}px`;\n    }\n\n    return { layoutCssVars, totalColumnWidth, totalFrozenColumnWidth, columnMetrics };\n  }, [columnWidths, columns, viewportWidth, minColumnWidth, lastFrozenColumnIndex]);\n\n  const [colOverscanStartIdx, colOverscanEndIdx] = useMemo((): [number, number] => {\n    if (!enableVirtualization) {\n      return [0, columns.length - 1];\n    }\n    // get the viewport's left side and right side positions for non-frozen columns\n    const viewportLeft = scrollLeft + totalFrozenColumnWidth;\n    const viewportRight = scrollLeft + viewportWidth;\n    // get first and last non-frozen column indexes\n    const lastColIdx = columns.length - 1;\n    const firstUnfrozenColumnIdx = Math.min(lastFrozenColumnIndex + 1, lastColIdx);\n\n    // skip rendering non-frozen columns if the frozen columns cover the entire viewport\n    if (viewportLeft >= viewportRight) {\n      return [firstUnfrozenColumnIdx, firstUnfrozenColumnIdx];\n    }\n\n    // get the first visible non-frozen column index\n    let colVisibleStartIdx = firstUnfrozenColumnIdx;\n    while (colVisibleStartIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleStartIdx])!;\n      // if the right side of the columnn is beyond the left side of the available viewport,\n      // then it is the first column that's at least partially visible\n      if (left + width > viewportLeft) {\n        break;\n      }\n      colVisibleStartIdx++;\n    }\n\n    // get the last visible non-frozen column index\n    let colVisibleEndIdx = colVisibleStartIdx;\n    while (colVisibleEndIdx < lastColIdx) {\n      const { left, width } = columnMetrics.get(columns[colVisibleEndIdx])!;\n      // if the right side of the column is beyond or equal to the right side of the available viewport,\n      // then it the last column that's at least partially visible, as the previous column's right side is not beyond the viewport.\n      if (left + width >= viewportRight) {\n        break;\n      }\n      colVisibleEndIdx++;\n    }\n\n    const colOverscanStartIdx = Math.max(firstUnfrozenColumnIdx, colVisibleStartIdx - 1);\n    const colOverscanEndIdx = Math.min(lastColIdx, colVisibleEndIdx + 1);\n\n    return [colOverscanStartIdx, colOverscanEndIdx];\n  }, [columnMetrics, columns, lastFrozenColumnIndex, scrollLeft, totalFrozenColumnWidth, viewportWidth, enableVirtualization]);\n\n  const viewportColumns = useMemo((): readonly CalculatedColumn<R, SR>[] => {\n    const viewportColumns: CalculatedColumn<R, SR>[] = [];\n    for (let colIdx = 0; colIdx <= colOverscanEndIdx; colIdx++) {\n      const column = columns[colIdx];\n\n      if (colIdx < colOverscanStartIdx && !column.frozen) continue;\n      viewportColumns.push(column);\n    }\n\n    return viewportColumns;\n  }, [colOverscanEndIdx, colOverscanStartIdx, columns]);\n\n  return { columns, viewportColumns, layoutCssVars, columnMetrics, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy };\n}\n\nfunction getSpecifiedWidth<R, SR>(\n  { key, width }: Column<R, SR>,\n  columnWidths: ReadonlyMap<string, number>,\n  viewportWidth: number\n): number | undefined {\n  if (columnWidths.has(key)) {\n    // Use the resized width if available\n    return columnWidths.get(key);\n  }\n  if (typeof width === 'number') {\n    return width;\n  }\n  if (typeof width === 'string' && /^\\d+%$/.test(width)) {\n    return Math.floor(viewportWidth * parseInt(width, 10) / 100);\n  }\n  return undefined;\n}\n\nfunction clampColumnWidth<R, SR>(\n  width: number,\n  { minWidth, maxWidth }: Column<R, SR>,\n  minColumnWidth: number\n): number {\n  width = Math.max(width, minWidth ?? minColumnWidth);\n\n  if (typeof maxWidth === 'number') {\n    return Math.min(width, maxWidth);\n  }\n\n  return width;\n}\n","import { useMemo } from 'react';\nimport type { GroupRow, GroupByDictionary } from '../types';\n\nconst RENDER_BACTCH_SIZE = 8;\n\ninterface ViewportRowsArgs<R> {\n  rawRows: readonly R[];\n  rowHeight: number;\n  clientHeight: number;\n  scrollTop: number;\n  groupBy: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  enableVirtualization: boolean;\n}\n\n// https://github.com/microsoft/TypeScript/issues/41808\nfunction isReadonlyArray(arr: unknown): arr is readonly unknown[] {\n  return Array.isArray(arr);\n}\n\nexport function useViewportRows<R>({\n  rawRows,\n  rowHeight,\n  clientHeight,\n  scrollTop,\n  groupBy,\n  rowGrouper,\n  expandedGroupIds,\n  enableVirtualization\n}: ViewportRowsArgs<R>) {\n  const [groupedRows, rowsCount] = useMemo(() => {\n    if (groupBy.length === 0 || !rowGrouper) return [undefined, rawRows.length];\n\n    const groupRows = (rows: readonly R[], [groupByKey, ...remainingGroupByKeys]: readonly string[], startRowIndex: number): [GroupByDictionary<R>, number] => {\n      let groupRowsCount = 0;\n      const groups: GroupByDictionary<R> = {};\n      for (const [key, childRows] of Object.entries(rowGrouper(rows, groupByKey))) {\n        // Recursively group each parent group\n        const [childGroups, childRowsCount] = remainingGroupByKeys.length === 0\n          ? [childRows, childRows.length]\n          : groupRows(childRows, remainingGroupByKeys, startRowIndex + groupRowsCount + 1); // 1 for parent row\n        groups[key] = { childRows, childGroups, startRowIndex: startRowIndex + groupRowsCount };\n        groupRowsCount += childRowsCount + 1; // 1 for parent row\n      }\n\n      return [groups, groupRowsCount];\n    };\n\n    return groupRows(rawRows, groupBy, 0);\n  }, [groupBy, rowGrouper, rawRows]);\n\n  const [rows, allGroupRows] = useMemo(() => {\n    const allGroupRows = new Set<unknown>();\n    if (!groupedRows) return [rawRows, allGroupRows];\n\n    const flattenedRows: Array<R | GroupRow<R>> = [];\n    const expandGroup = (rows: GroupByDictionary<R> | readonly R[], parentId: string | undefined, level: number): void => {\n      if (isReadonlyArray(rows)) {\n        flattenedRows.push(...rows);\n        return;\n      }\n      Object.keys(rows).forEach((groupKey, posInSet, keys) => {\n        // TODO: should users have control over the generated key?\n        const id = parentId !== undefined ? `${parentId}__${groupKey}` : groupKey;\n        const isExpanded = expandedGroupIds?.has(id) ?? false;\n        const { childRows, childGroups, startRowIndex } = rows[groupKey];\n\n        const groupRow: GroupRow<R> = {\n          id,\n          parentId,\n          groupKey,\n          isExpanded,\n          childRows,\n          level,\n          posInSet,\n          startRowIndex,\n          setSize: keys.length\n        };\n        flattenedRows.push(groupRow);\n        allGroupRows.add(groupRow);\n\n        if (isExpanded) {\n          expandGroup(childGroups, id, level + 1);\n        }\n      });\n    };\n\n    expandGroup(groupedRows, undefined, 0);\n    return [flattenedRows, allGroupRows];\n  }, [expandedGroupIds, groupedRows, rawRows]);\n\n  const isGroupRow = <R>(row: unknown): row is GroupRow<R> => allGroupRows.has(row);\n\n  if (!enableVirtualization) {\n    return {\n      rowOverscanStartIdx: 0,\n      rowOverscanEndIdx: rows.length - 1,\n      rows,\n      rowsCount,\n      isGroupRow\n    };\n  }\n\n  const overscanThreshold = 4;\n  const rowVisibleStartIdx = Math.floor(scrollTop / rowHeight);\n  const rowVisibleEndIdx = Math.min(rows.length - 1, Math.floor((scrollTop + clientHeight) / rowHeight));\n  const rowOverscanStartIdx = Math.max(0, Math.floor((rowVisibleStartIdx - overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n  const rowOverscanEndIdx = Math.min(rows.length - 1, Math.ceil((rowVisibleEndIdx + overscanThreshold) / RENDER_BACTCH_SIZE) * RENDER_BACTCH_SIZE);\n\n  return {\n    rowOverscanStartIdx,\n    rowOverscanEndIdx,\n    rows,\n    rowsCount,\n    isGroupRow\n  };\n}\n","import { useRef, useEffect, useCallback } from 'react';\n\n// https://reactjs.org/docs/hooks-faq.html#what-can-i-do-if-my-effect-dependencies-change-too-often\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function useLatestFunc<T extends (...args: any[]) => any>(fn: T) {\n  const ref = useRef(fn);\n\n  useEffect(() => {\n    ref.current = fn;\n  });\n\n  return useCallback((...args: Parameters<T>) => {\n    ref.current(...args);\n  }, []);\n}\n","import { css } from '@linaria/core';\nimport type { HeaderCellProps } from '../HeaderCell';\nimport type { SortDirection } from '../types';\n\nconst headerSortCell = css`\n  cursor: pointer;\n  display: flex;\n`;\n\nconst headerSortCellClassname = `rdg-header-sort-cell ${headerSortCell}`;\n\nconst headerSortName = css`\n  flex-grow: 1;\n  overflow: hidden;\n  overflow: clip;\n  text-overflow: ellipsis;\n`;\n\nconst headerSortNameClassname = `rdg-header-sort-name ${headerSortName}`;\n\ntype SharedHeaderCellProps<R, SR> = Pick<HeaderCellProps<R, SR>,\n  | 'column'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n>;\n\ninterface Props<R, SR> extends SharedHeaderCellProps<R, SR> {\n  children: React.ReactNode;\n}\n\nexport default function SortableHeaderCell<R, SR>({\n  column,\n  onSort,\n  sortColumn,\n  sortDirection,\n  children\n}: Props<R, SR>) {\n  sortDirection = sortColumn === column.key && sortDirection || 'NONE';\n  let sortText = '';\n  if (sortDirection === 'ASC') {\n    sortText = '\\u25B2';\n  } else if (sortDirection === 'DESC') {\n    sortText = '\\u25BC';\n  }\n\n  function onClick() {\n    if (!onSort) return;\n    const { sortDescendingFirst } = column;\n    let direction: SortDirection;\n    switch (sortDirection) {\n      case 'ASC':\n        direction = sortDescendingFirst ? 'NONE' : 'DESC';\n        break;\n      case 'DESC':\n        direction = sortDescendingFirst ? 'ASC' : 'NONE';\n        break;\n      default:\n        direction = sortDescendingFirst ? 'DESC' : 'ASC';\n        break;\n    }\n    onSort(column.key, direction);\n  }\n\n  return (\n    <span className={headerSortCellClassname} onClick={onClick}>\n      <span className={headerSortNameClassname}>{children}</span>\n      <span>{sortText}</span>\n    </span>\n  );\n}\n","// https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values\nconst nonInputKeys = new Set([\n  // Special keys\n  'Unidentified',\n  // Modifier keys\n  'Alt',\n  'AltGraph',\n  'CapsLock',\n  'Control',\n  'Fn',\n  'FnLock',\n  'Meta',\n  'NumLock',\n  'ScrollLock',\n  'Shift',\n  // Whitespace keys\n  'Tab',\n  // Navigation keys\n  'ArrowDown',\n  'ArrowLeft',\n  'ArrowRight',\n  'ArrowUp',\n  'End',\n  'Home',\n  'PageDown',\n  'PageUp',\n  // Editing\n  'Insert',\n  // UI keys\n  'ContextMenu',\n  'Escape',\n  'Pause',\n  'Play',\n  // Device keys\n  'PrintScreen',\n  // Function keys\n  'F1',\n  // 'F2', /!\\ specifically allowed, do not edit\n  'F3',\n  'F4',\n  'F5',\n  'F6',\n  'F7',\n  'F8',\n  'F9',\n  'F10',\n  'F11',\n  'F12'\n]);\n\nexport function isCtrlKeyHeldDown(e: React.KeyboardEvent): boolean {\n  return (e.ctrlKey || e.metaKey) && e.key !== 'Control';\n}\n\nexport function isDefaultCellInput(event: React.KeyboardEvent<HTMLDivElement>): boolean {\n  return !nonInputKeys.has(event.key);\n}\n\n/**\n * By default, the following navigation keys are enabled while an editor is open, under specific conditions:\n * - Tab:\n *   - The editor must be an <input>, a <textarea>, or a <select> element.\n *   - The editor element must be the only immediate child of the editor container/a label.\n */\nexport function onEditorNavigation({ key, target }: React.KeyboardEvent<HTMLDivElement>): boolean {\n  if (key === 'Tab' && (target instanceof HTMLInputElement || target instanceof HTMLTextAreaElement || target instanceof HTMLSelectElement)) {\n    return target.matches('.rdg-editor-container > :only-child, .rdg-editor-container > label:only-child > :only-child');\n  }\n  return false;\n}\n","import type { CalculatedColumn, Position, GroupRow, CellNavigationMode } from '../types';\n\ninterface IsSelectedCellEditableOpts<R, SR> {\n  selectedPosition: Position;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rows: readonly (R | GroupRow<R>)[];\n  isGroupRow: (row: R | GroupRow<R>) => row is GroupRow<R>;\n}\n\nexport function isSelectedCellEditable<R, SR>({ selectedPosition, columns, rows, isGroupRow }: IsSelectedCellEditableOpts<R, SR>): boolean {\n  const column = columns[selectedPosition.idx];\n  const row = rows[selectedPosition.rowIdx];\n  return column.editor != null\n    && !column.rowGroup\n    && !isGroupRow(row)\n    && (typeof column.editable === 'function' ? column.editable(row) : column.editable) !== false;\n}\n\ninterface GetNextSelectedCellPositionOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  nextPosition: Position;\n}\n\nexport function getNextSelectedCellPosition<R, SR>({ cellNavigationMode, columns, rowsCount, nextPosition }: GetNextSelectedCellPositionOpts<R, SR>): Position {\n  if (cellNavigationMode !== 'NONE') {\n    const { idx, rowIdx } = nextPosition;\n    const columnsCount = columns.length;\n    const isAfterLastColumn = idx === columnsCount;\n    const isBeforeFirstColumn = idx === -1;\n\n    if (isAfterLastColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isLastRow = rowIdx === rowsCount - 1;\n        if (!isLastRow) {\n          return {\n            idx: 0,\n            rowIdx: rowIdx + 1\n          };\n        }\n      } else {\n        return {\n          rowIdx,\n          idx: 0\n        };\n      }\n    } else if (isBeforeFirstColumn) {\n      if (cellNavigationMode === 'CHANGE_ROW') {\n        const isFirstRow = rowIdx === 0;\n        if (!isFirstRow) {\n          return {\n            rowIdx: rowIdx - 1,\n            idx: columnsCount - 1\n          };\n        }\n      } else {\n        return {\n          rowIdx,\n          idx: columnsCount - 1\n        };\n      }\n    }\n  }\n\n  return nextPosition;\n}\n\ninterface CanExitGridOpts<R, SR> {\n  cellNavigationMode: CellNavigationMode;\n  columns: readonly CalculatedColumn<R, SR>[];\n  rowsCount: number;\n  selectedPosition: Position;\n  shiftKey: boolean;\n}\n\nexport function canExitGrid<R, SR>({ cellNavigationMode, columns, rowsCount, selectedPosition: { rowIdx, idx }, shiftKey }: CanExitGridOpts<R, SR>): boolean {\n  // When the cellNavigationMode is 'none' or 'changeRow', you can exit the grid if you're at the first or last cell of the grid\n  // When the cellNavigationMode is 'loopOverRow', there is no logical exit point so you can't exit the grid\n  if (cellNavigationMode === 'NONE' || cellNavigationMode === 'CHANGE_ROW') {\n    const atLastCellInRow = idx === columns.length - 1;\n    const atFirstCellInRow = idx === 0;\n    const atLastRow = rowIdx === rowsCount - 1;\n    const atFirstRow = rowIdx === 0;\n\n    return shiftKey ? atFirstCellInRow && atFirstRow : atLastCellInRow && atLastRow;\n  }\n\n  return false;\n}\n","import clsx from 'clsx';\n\nimport type { CalculatedColumn } from '../types';\nimport { cellClassname, cellFrozenClassname, cellFrozenLastClassname } from '../style';\n\nexport * from './domUtils';\nexport * from './keyboardUtils';\nexport * from './selectedCellUtils';\n\nexport function assertIsValidKeyGetter<R>(keyGetter: unknown): asserts keyGetter is (row: R) => React.Key {\n  if (typeof keyGetter !== 'function') {\n    throw new Error('Please specify the rowKeyGetter prop to use selection');\n  }\n}\n\nexport function getCellStyle<R, SR>(column: CalculatedColumn<R, SR>): React.CSSProperties {\n  return column.frozen\n    ? { left: `var(--frozen-left-${column.key})` }\n    : { gridColumnStart: column.idx + 1 };\n}\n\nexport function getCellClassname<R, SR>(column: CalculatedColumn<R, SR>, ...extraClasses: Parameters<typeof clsx>): string {\n  return clsx(\n    cellClassname, {\n      [cellFrozenClassname]: column.frozen,\n      [cellFrozenLastClassname]: column.isLastFrozenColumn\n    },\n    ...extraClasses\n  );\n}\n","import { css } from '@linaria/core';\n\nimport type { CalculatedColumn, SortDirection } from './types';\nimport type { HeaderRowProps } from './HeaderRow';\nimport SortableHeaderCell from './headerCells/SortableHeaderCell';\nimport { getCellStyle, getCellClassname } from './utils';\n\nconst cellResizable = css`\n  &::after {\n    content: \"\";\n    cursor: col-resize;\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    width: 10px;\n  }\n`;\n\nconst cellResizableClassname = `rdg-cell-resizable ${cellResizable}`;\n\nfunction getAriaSort(sortDirection?: SortDirection) {\n  switch (sortDirection) {\n    case 'ASC':\n      return 'ascending';\n    case 'DESC':\n      return 'descending';\n    default:\n      return 'none';\n  }\n}\n\ntype SharedHeaderRowProps<R, SR> = Pick<HeaderRowProps<R, SR>,\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'allRowsSelected'\n>;\n\nexport interface HeaderCellProps<R, SR> extends SharedHeaderRowProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  onResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n  onAllRowsSelectionChange: (checked: boolean) => void;\n}\n\nexport default function HeaderCell<R, SR>({\n  column,\n  onResize,\n  allRowsSelected,\n  onAllRowsSelectionChange,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderCellProps<R, SR>) {\n  function onPointerDown(event: React.PointerEvent<HTMLDivElement>) {\n    if (event.pointerType === 'mouse' && event.buttons !== 1) {\n      return;\n    }\n\n    const { currentTarget, pointerId } = event;\n    const { right } = currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function onPointerMove(event: PointerEvent) {\n      if (event.pointerId !== pointerId) return;\n      if (event.pointerType === 'mouse' && event.buttons !== 1) {\n        onPointerUp();\n        return;\n      }\n      const width = event.clientX + offset - currentTarget.getBoundingClientRect().left;\n      if (width > 0) {\n        onResize(column, width);\n      }\n    }\n\n    function onPointerUp() {\n      if (event.pointerId !== pointerId) return;\n      window.removeEventListener('pointermove', onPointerMove);\n      window.removeEventListener('pointerup', onPointerUp);\n    }\n\n    event.preventDefault();\n    window.addEventListener('pointermove', onPointerMove);\n    window.addEventListener('pointerup', onPointerUp);\n  }\n\n  function getCell() {\n    if (column.headerRenderer) {\n      return (\n        <column.headerRenderer\n          column={column}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n          onSort={onSort}\n          allRowsSelected={allRowsSelected}\n          onAllRowsSelectionChange={onAllRowsSelectionChange}\n        />\n      );\n    }\n\n    if (column.sortable) {\n      return (\n        <SortableHeaderCell\n          column={column}\n          onSort={onSort}\n          sortColumn={sortColumn}\n          sortDirection={sortDirection}\n        >\n          {column.name}\n        </SortableHeaderCell>\n      );\n    }\n\n    return column.name;\n  }\n\n  const className = getCellClassname(column, column.headerCellClass, {\n    [cellResizableClassname]: column.resizable\n  });\n\n  return (\n    <div\n      role=\"columnheader\"\n      aria-colindex={column.idx + 1}\n      aria-sort={sortColumn === column.key ? getAriaSort(sortDirection) : undefined}\n      className={className}\n      style={getCellStyle(column)}\n      onPointerDown={column.resizable ? onPointerDown : undefined}\n    >\n      {getCell()}\n    </div>\n  );\n}\n","import { useCallback, memo } from 'react';\n\nimport HeaderCell from './HeaderCell';\nimport type { CalculatedColumn } from './types';\nimport { assertIsValidKeyGetter } from './utils';\nimport type { DataGridProps } from './DataGrid';\nimport { headerRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'rows'\n  | 'onSelectedRowsChange'\n  | 'sortColumn'\n  | 'sortDirection'\n  | 'onSort'\n  | 'rowKeyGetter'\n>;\n\nexport interface HeaderRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n  allRowsSelected: boolean;\n  onColumnResize: (column: CalculatedColumn<R, SR>, width: number) => void;\n}\n\nfunction HeaderRow<R, SR>({\n  columns,\n  rows,\n  rowKeyGetter,\n  onSelectedRowsChange,\n  allRowsSelected,\n  onColumnResize,\n  sortColumn,\n  sortDirection,\n  onSort\n}: HeaderRowProps<R, SR>) {\n  const handleAllRowsSelectionChange = useCallback((checked: boolean) => {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n\n    const newSelectedRows = new Set<React.Key>(checked ? rows.map(rowKeyGetter) : undefined);\n    onSelectedRowsChange(newSelectedRows);\n  }, [onSelectedRowsChange, rows, rowKeyGetter]);\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={headerRowClassname}\n    >\n      {columns.map(column => {\n        return (\n          <HeaderCell<R, SR>\n            key={column.key}\n            column={column}\n            onResize={onColumnResize}\n            allRowsSelected={allRowsSelected}\n            onAllRowsSelectionChange={handleAllRowsSelectionChange}\n            onSort={onSort}\n            sortColumn={sortColumn}\n            sortDirection={sortDirection}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(HeaderRow) as <R, SR>(props: HeaderRowProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn, Filters } from './types';\nimport type { DataGridProps } from './DataGrid';\nimport { filterRowClassname } from './style';\n\ntype SharedDataGridProps<R, SR> = Pick<DataGridProps<R, SR>,\n  | 'filters'\n  | 'onFiltersChange'\n>;\n\ninterface FilterRowProps<R, SR> extends SharedDataGridProps<R, SR> {\n  columns: readonly CalculatedColumn<R, SR>[];\n}\n\nfunction FilterRow<R, SR>({\n  columns,\n  filters,\n  onFiltersChange\n}: FilterRowProps<R, SR>) {\n  function onChange(key: string, value: unknown) {\n    const newFilters: Filters = { ...filters };\n    newFilters[key] = value;\n    onFiltersChange?.(newFilters);\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={2}\n      className={filterRowClassname}\n    >\n      {columns.map(column => {\n        const { key } = column;\n\n        return (\n          <div\n            key={key}\n            className={getCellClassname(column)}\n            style={getCellStyle(column)}\n          >\n            {column.filterRenderer && (\n              <column.filterRenderer\n                column={column}\n                value={filters?.[column.key]}\n                onChange={value => onChange(key, value)}\n              />\n            )}\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(FilterRow) as <R, SR>(props: FilterRowProps<R, SR>) => JSX.Element;\n","import { forwardRef, memo } from 'react';\nimport type { RefAttributes } from 'react';\nimport { css } from '@linaria/core';\n\nimport { cellSelectedClassname } from './style';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\nconst cellCopied = css`\n  background-color: #ccccff;\n`;\n\nconst cellCopiedClassname = `rdg-cell-copied ${cellCopied}`;\n\nconst cellDraggedOver = css`\n  background-color: #ccccff;\n\n  &.${cellCopied} {\n    background-color: #9999ff;\n  }\n`;\n\nconst cellDraggedOverClassname = `rdg-cell-dragged-over ${cellDraggedOver}`;\n\nconst cellDragHandle = css`\n  cursor: move;\n  position: absolute;\n  right: 0;\n  bottom: 0;\n  width: 8px;\n  height: 8px;\n  background-color: var(--selection-color);\n\n  &:hover {\n    width: 16px;\n    height: 16px;\n    border: 2px solid var(--selection-color);\n    background-color: var(--background-color);\n  }\n`;\n\nconst cellDragHandleClassname = `rdg-cell-drag-handle ${cellDragHandle}`;\n\nfunction Cell<R, SR>({\n  className,\n  column,\n  isCellSelected,\n  isCopied,\n  isDraggedOver,\n  isRowSelected,\n  row,\n  rowIdx,\n  dragHandleProps,\n  onRowClick,\n  onClick,\n  onDoubleClick,\n  onContextMenu,\n  onRowChange,\n  selectCell,\n  selectRow,\n  ...props\n}: CellRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    {\n      [cellSelectedClassname]: isCellSelected,\n      [cellCopiedClassname]: isCopied,\n      [cellDraggedOverClassname]: isDraggedOver\n    },\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function selectCellWrapper(openEditor?: boolean) {\n    selectCell({ idx: column.idx, rowIdx }, openEditor);\n  }\n\n  function handleClick(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper(column.editorOptions?.editOnClick);\n    onRowClick?.(rowIdx, row, column);\n    onClick?.(event);\n  }\n\n  function handleContextMenu(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper();\n    onContextMenu?.(event);\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    selectCellWrapper(true);\n    onDoubleClick?.(event);\n  }\n\n  function handleRowChange(newRow: R) {\n    onRowChange(rowIdx, newRow);\n  }\n\n  function onRowSelectionChange(checked: boolean, isShiftClick: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick });\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected={isCellSelected}\n      ref={ref}\n      className={className}\n      style={getCellStyle(column)}\n      onClick={handleClick}\n      onDoubleClick={handleDoubleClick}\n      onContextMenu={handleContextMenu}\n      {...props}\n    >\n      {!column.rowGroup && (\n        <>\n          <column.formatter\n            column={column}\n            rowIdx={rowIdx}\n            row={row}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            onRowSelectionChange={onRowSelectionChange}\n            onRowChange={handleRowChange}\n          />\n          {dragHandleProps && (\n            <div className={cellDragHandleClassname} {...dragHandleProps} />\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Cell)) as <R, SR = unknown>(props: CellRendererProps<R, SR> & RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { createPortal } from 'react-dom';\nimport { css } from '@linaria/core';\n\nimport type { EditorProps } from '../types';\nimport { useClickOutside } from '../hooks';\n\nconst editorContainer = css`\n  display: contents;\n`;\n\nconst editorContainerClassname = `rdg-editor-container ${editorContainer}`;\n\nexport default function EditorContainer<R, SR>({\n  row,\n  column,\n  onRowChange,\n  ...props\n}: EditorProps<R, SR>) {\n  const onClickCapture = useClickOutside(() => onRowChange(row, true));\n  if (column.editor === undefined) return null;\n\n  const editor = (\n    <div className={editorContainerClassname} onClickCapture={onClickCapture}>\n      <column.editor\n        row={row}\n        column={column}\n        onRowChange={onRowChange}\n        {...props}\n      />\n    </div>\n  );\n\n  if (column.editorOptions?.createPortal) {\n    return createPortal(editor, props.editorPortalTarget);\n  }\n\n  return editor;\n}\n","import { useState, useCallback } from 'react';\nimport { css } from '@linaria/core';\n\nimport { cellSelectedClassname } from './style';\nimport EditorContainer from './editors/EditorContainer';\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps, SharedEditorProps, Omit } from './types';\n\nconst cellEditing = css`\n  padding: 0;\n`;\n\nconst cellEditingClassname = `rdg-cell-editing ${cellEditing}`;\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>,\n  | 'rowIdx'\n  | 'row'\n  | 'column'\n>;\n\ninterface EditCellProps<R, SR> extends SharedCellRendererProps<R, SR>, Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  editorProps: SharedEditorProps<R>;\n}\n\nexport default function EditCell<R, SR>({\n  className,\n  column,\n  row,\n  rowIdx,\n  editorProps,\n  ...props\n}: EditCellProps<R, SR>) {\n  const [dimensions, setDimensions] = useState<{ left: number; top: number } | null>(null);\n\n  const cellRef = useCallback(node => {\n    if (node !== null) {\n      const { left, top } = node.getBoundingClientRect();\n      setDimensions({ left, top });\n    }\n  }, []);\n\n  const { cellClass } = column;\n  className = getCellClassname(\n    column,\n    cellSelectedClassname,\n    cellEditingClassname,\n    typeof cellClass === 'function' ? cellClass(row) : cellClass,\n    className\n  );\n\n  function getCellContent() {\n    if (dimensions === null) return;\n    const { scrollTop: docTop, scrollLeft: docLeft } = document.scrollingElement ?? document.documentElement;\n    const { left, top } = dimensions;\n    const gridLeft = left + docLeft;\n    const gridTop = top + docTop;\n\n    return (\n      <EditorContainer\n        {...editorProps}\n        rowIdx={rowIdx}\n        column={column}\n        left={gridLeft}\n        top={gridTop}\n      />\n    );\n  }\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1} // aria-colindex is 1-based\n      aria-selected\n      ref={cellRef}\n      className={className}\n      style={getCellStyle(column)}\n      {...props}\n    >\n      {getCellContent()}\n    </div>\n  );\n}\n","import { memo, forwardRef } from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowSelectedClassname, rowClassname, rowSelectedClassname } from './style';\nimport Cell from './Cell';\nimport EditCell from './EditCell';\nimport type { RowRendererProps, SelectedCellProps } from './types';\n\nfunction Row<R, SR = unknown>({\n  cellRenderer: CellRenderer = Cell,\n  className,\n  rowIdx,\n  isRowSelected,\n  copiedCellIdx,\n  draggedOverCellIdx,\n  row,\n  viewportColumns,\n  selectedCellProps,\n  onRowClick,\n  rowClass,\n  setDraggedOverRowIdx,\n  onMouseEnter,\n  top,\n  onRowChange,\n  selectCell,\n  selectRow,\n  'aria-rowindex': ariaRowIndex,\n  'aria-selected': ariaSelected,\n  ...props\n}: RowRendererProps<R, SR>, ref: React.Ref<HTMLDivElement>) {\n  function handleDragEnter(event: React.MouseEvent<HTMLDivElement>) {\n    setDraggedOverRowIdx?.(rowIdx);\n    onMouseEnter?.(event);\n  }\n\n  className = clsx(\n    rowClassname,\n    `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n      [rowSelectedClassname]: isRowSelected,\n      [groupRowSelectedClassname]: selectedCellProps?.idx === -1\n    },\n    rowClass?.(row),\n    className\n  );\n\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      aria-selected={ariaSelected}\n      ref={ref}\n      className={className}\n      onMouseEnter={handleDragEnter}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => {\n        const isCellSelected = selectedCellProps?.idx === column.idx;\n        if (selectedCellProps?.mode === 'EDIT' && isCellSelected) {\n          return (\n            <EditCell<R, SR>\n              key={column.key}\n              rowIdx={rowIdx}\n              column={column}\n              row={row}\n              onKeyDown={selectedCellProps.onKeyDown}\n              editorProps={selectedCellProps.editorProps}\n            />\n          );\n        }\n\n        return (\n          <CellRenderer\n            key={column.key}\n            rowIdx={rowIdx}\n            column={column}\n            row={row}\n            isCopied={copiedCellIdx === column.idx}\n            isDraggedOver={draggedOverCellIdx === column.idx}\n            isCellSelected={isCellSelected}\n            isRowSelected={isRowSelected}\n            dragHandleProps={isCellSelected ? (selectedCellProps as SelectedCellProps).dragHandleProps : undefined}\n            onFocus={isCellSelected ? (selectedCellProps as SelectedCellProps).onFocus : undefined}\n            onKeyDown={isCellSelected ? selectedCellProps!.onKeyDown : undefined}\n            onRowClick={onRowClick}\n            onRowChange={onRowChange}\n            selectCell={selectCell}\n            selectRow={selectRow}\n          />\n        );\n      })}\n    </div>\n  );\n}\n\nexport default memo(forwardRef(Row)) as <R, SR = unknown>(props: RowRendererProps<R, SR> & RefAttributes<HTMLDivElement>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CalculatedColumn } from './types';\nimport type { GroupRowRendererProps } from './GroupRow';\nimport { cellSelectedClassname } from './style';\n\ntype SharedGroupRowRendererProps<R, SR> = Pick<GroupRowRendererProps<R, SR>,\n  | 'id'\n  | 'rowIdx'\n  | 'groupKey'\n  | 'childRows'\n  | 'isExpanded'\n  | 'isRowSelected'\n  | 'selectRow'\n  | 'toggleGroup'\n>;\n\ninterface GroupCellProps<R, SR> extends SharedGroupRowRendererProps<R, SR> {\n  column: CalculatedColumn<R, SR>;\n  isCellSelected: boolean;\n  groupColumnIndex: number;\n}\n\nfunction GroupCell<R, SR>({\n  id,\n  rowIdx,\n  groupKey,\n  childRows,\n  isExpanded,\n  isCellSelected,\n  isRowSelected,\n  column,\n  groupColumnIndex,\n  selectRow,\n  toggleGroup: toggleGroupWrapper\n}: GroupCellProps<R, SR>) {\n  function toggleGroup() {\n    toggleGroupWrapper(id);\n  }\n\n  function onRowSelectionChange(checked: boolean) {\n    selectRow({ rowIdx, checked, isShiftClick: false });\n  }\n\n  // Only make the cell clickable if the group level matches\n  const isLevelMatching = column.rowGroup && groupColumnIndex === column.idx;\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      key={column.key}\n      className={getCellClassname(column, {\n        [cellSelectedClassname]: isCellSelected\n      })}\n      style={{\n        ...getCellStyle(column),\n        cursor: isLevelMatching ? 'pointer' : 'default'\n      }}\n      onClick={isLevelMatching ? toggleGroup : undefined}\n    >\n      {(!column.rowGroup || groupColumnIndex === column.idx) && column.groupFormatter && (\n        <column.groupFormatter\n          groupKey={groupKey}\n          childRows={childRows}\n          column={column}\n          isExpanded={isExpanded}\n          isCellSelected={isCellSelected}\n          isRowSelected={isRowSelected}\n          onRowSelectionChange={onRowSelectionChange}\n          toggleGroup={toggleGroup}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default memo(GroupCell) as <R, SR>(props: GroupCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport clsx from 'clsx';\n\nimport { groupRowClassname, groupRowSelectedClassname, rowClassname, rowSelectedClassname } from './style';\nimport { SELECT_COLUMN_KEY } from './Columns';\nimport GroupCell from './GroupCell';\nimport type { CalculatedColumn, Position, SelectRowEvent, Omit } from './types';\n\nexport interface GroupRowRendererProps<R, SR = unknown> extends Omit<React.HTMLAttributes<HTMLDivElement>, 'style' | 'children'> {\n  id: string;\n  groupKey: unknown;\n  viewportColumns: readonly CalculatedColumn<R, SR>[];\n  childRows: readonly R[];\n  rowIdx: number;\n  top: number;\n  level: number;\n  selectedCellIdx?: number;\n  isExpanded: boolean;\n  isRowSelected: boolean;\n  selectCell: (position: Position, enableEditor?: boolean) => void;\n  selectRow: (selectRowEvent: SelectRowEvent) => void;\n  toggleGroup: (expandedGroupId: unknown) => void;\n}\n\nfunction GroupedRow<R, SR>({\n  id,\n  groupKey,\n  viewportColumns,\n  childRows,\n  rowIdx,\n  top,\n  level,\n  isExpanded,\n  selectedCellIdx,\n  isRowSelected,\n  selectCell,\n  selectRow,\n  toggleGroup,\n  ...props\n}: GroupRowRendererProps<R, SR>) {\n  // Select is always the first column\n  const idx = viewportColumns[0].key === SELECT_COLUMN_KEY ? level + 1 : level;\n\n  function selectGroup() {\n    selectCell({ rowIdx, idx: -1 });\n  }\n\n  return (\n    <div\n      role=\"row\"\n      aria-level={level}\n      aria-expanded={isExpanded}\n      className={clsx(\n        rowClassname,\n        groupRowClassname,\n        `rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'}`, {\n          [rowSelectedClassname]: isRowSelected,\n          [groupRowSelectedClassname]: selectedCellIdx === -1 // Select row if there is no selected cell\n        }\n      )}\n      onClick={selectGroup}\n      style={{ top }}\n      {...props}\n    >\n      {viewportColumns.map(column => (\n        <GroupCell<R, SR>\n          key={column.key}\n          id={id}\n          rowIdx={rowIdx}\n          groupKey={groupKey}\n          childRows={childRows}\n          isExpanded={isExpanded}\n          isRowSelected={isRowSelected}\n          isCellSelected={selectedCellIdx === column.idx}\n          column={column}\n          groupColumnIndex={idx}\n          selectRow={selectRow}\n          toggleGroup={toggleGroup}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(GroupedRow) as <R, SR>(props: GroupRowRendererProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\n\nimport { getCellStyle, getCellClassname } from './utils';\nimport type { CellRendererProps } from './types';\n\ntype SharedCellRendererProps<R, SR> = Pick<CellRendererProps<R, SR>, 'column'>;\n\ninterface SummaryCellProps<R, SR> extends SharedCellRendererProps<R, SR> {\n  row: SR;\n}\n\nfunction SummaryCell<R, SR>({\n  column,\n  row\n}: SummaryCellProps<R, SR>) {\n  const { summaryFormatter: SummaryFormatter, summaryCellClass } = column;\n  const className = getCellClassname(column,\n    typeof summaryCellClass === 'function' ? summaryCellClass(row) : summaryCellClass\n  );\n\n  return (\n    <div\n      role=\"gridcell\"\n      aria-colindex={column.idx + 1}\n      className={className}\n      style={getCellStyle(column)}\n    >\n      {SummaryFormatter && <SummaryFormatter column={column} row={row} />}\n    </div>\n  );\n}\n\nexport default memo(SummaryCell) as <R, SR>(props: SummaryCellProps<R, SR>) => JSX.Element;\n","import { memo } from 'react';\nimport { rowClassname, summaryRowClassname } from './style';\nimport SummaryCell from './SummaryCell';\nimport type { RowRendererProps } from './types';\n\ntype SharedRowRendererProps<R, SR> = Pick<RowRendererProps<R, SR>,\n  | 'viewportColumns'\n  | 'rowIdx'\n>;\n\ninterface SummaryRowProps<R, SR> extends SharedRowRendererProps<R, SR> {\n  'aria-rowindex': number;\n  row: SR;\n  bottom: number;\n}\n\nfunction SummaryRow<R, SR>({\n  rowIdx,\n  row,\n  viewportColumns,\n  bottom,\n  'aria-rowindex': ariaRowIndex\n}: SummaryRowProps<R, SR>) {\n  return (\n    <div\n      role=\"row\"\n      aria-rowindex={ariaRowIndex}\n      className={`${rowClassname} rdg-row-${rowIdx % 2 === 0 ? 'even' : 'odd'} ${summaryRowClassname}`}\n      style={{ bottom }}\n    >\n      {viewportColumns.map(column => (\n        <SummaryCell<R, SR>\n          key={column.key}\n          column={column}\n          row={row}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default memo(SummaryRow) as <R, SR>(props: SummaryRowProps<R, SR>) => JSX.Element;\n","import {\n  forwardRef,\n  useState,\n  useRef,\n  useLayoutEffect,\n  useImperativeHandle,\n  useCallback\n} from 'react';\nimport type { RefAttributes } from 'react';\nimport clsx from 'clsx';\n\nimport { rootClassname, viewportDraggingClassname, focusSinkClassname } from './style';\nimport { useGridDimensions, useViewportColumns, useViewportRows, useLatestFunc } from './hooks';\nimport HeaderRow from './HeaderRow';\nimport FilterRow from './FilterRow';\nimport Row from './Row';\nimport GroupRowRenderer from './GroupRow';\nimport SummaryRow from './SummaryRow';\nimport {\n  assertIsValidKeyGetter,\n  onEditorNavigation,\n  getNextSelectedCellPosition,\n  isSelectedCellEditable,\n  canExitGrid,\n  isCtrlKeyHeldDown,\n  isDefaultCellInput\n} from './utils';\n\nimport type {\n  CalculatedColumn,\n  Column,\n  Filters,\n  Position,\n  RowRendererProps,\n  RowsChangeData,\n  SelectRowEvent,\n  SelectedCellProps,\n  EditCellProps,\n  FillEvent,\n  PasteEvent,\n  CellNavigationMode,\n  SortDirection\n} from './types';\n\ninterface SelectCellState extends Position {\n  mode: 'SELECT';\n}\n\ninterface EditCellState<R> extends Position {\n  mode: 'EDIT';\n  row: R;\n  originalRow: R;\n  key: string | null;\n}\n\ntype DefaultColumnOptions<R, SR> = Pick<Column<R, SR>,\n  | 'formatter'\n  | 'minWidth'\n  | 'resizable'\n  | 'sortable'\n>;\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nconst body = globalThis.document?.body;\n\nexport interface DataGridHandle {\n  element: HTMLDivElement | null;\n  scrollToColumn: (colIdx: number) => void;\n  scrollToRow: (rowIdx: number) => void;\n  selectCell: (position: Position, openEditor?: boolean) => void;\n}\n\ntype SharedDivProps = Pick<React.HTMLAttributes<HTMLDivElement>,\n  | 'aria-label'\n  | 'aria-labelledby'\n  | 'aria-describedby'\n  | 'className'\n  | 'style'\n>;\n\nexport interface DataGridProps<R, SR = unknown> extends SharedDivProps {\n  /**\n   * Grid and data Props\n   */\n  /** An array of objects representing each column on the grid */\n  columns: readonly Column<R, SR>[];\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rows: readonly R[];\n  /**\n   * Rows to be pinned at the bottom of the rows view for summary, the vertical scroll bar will not scroll these rows.\n   * Bottom horizontal scroll bar can move the row left / right. Or a customized row renderer can be used to disabled the scrolling support.\n   */\n  summaryRows?: readonly SR[];\n  /** The getter should return a unique key for each row */\n  rowKeyGetter?: (row: R) => React.Key;\n  onRowsChange?: (rows: R[], data: RowsChangeData<R, SR>) => void;\n\n  /**\n   * Dimensions props\n   */\n  /** The height of each row in pixels */\n  rowHeight?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight?: number;\n  /** The height of each summary row in pixels */\n  summaryRowHeight?: number;\n\n  /**\n   * Feature props\n   */\n  /** Set of selected row keys */\n  selectedRows?: ReadonlySet<React.Key>;\n  /** Function called whenever row selection is changed */\n  onSelectedRowsChange?: (selectedRows: Set<React.Key>) => void;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: string;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: SortDirection;\n  /** Function called whenever grid is sorted*/\n  onSort?: (columnKey: string, direction: SortDirection) => void;\n  filters?: Readonly<Filters>;\n  onFiltersChange?: (filters: Filters) => void;\n  defaultColumnOptions?: DefaultColumnOptions<R, SR>;\n  groupBy?: readonly string[];\n  rowGrouper?: (rows: readonly R[], columnKey: string) => Record<string, readonly R[]>;\n  expandedGroupIds?: ReadonlySet<unknown>;\n  onExpandedGroupIdsChange?: (expandedGroupIds: Set<unknown>) => void;\n  onFill?: (event: FillEvent<R>) => R[];\n  onPaste?: (event: PasteEvent<R>) => R;\n\n  /**\n   * Custom renderers\n   */\n  rowRenderer?: React.ComponentType<RowRendererProps<R, SR>>;\n  emptyRowsRenderer?: React.ComponentType;\n\n  /**\n   * Event props\n   */\n  /** Function called whenever a row is clicked */\n  onRowClick?: (rowIdx: number, row: R, column: CalculatedColumn<R, SR>) => void;\n  /** Called when the grid is scrolled */\n  onScroll?: (event: React.UIEvent<HTMLDivElement>) => void;\n  /** Called when a column is resized */\n  onColumnResize?: (idx: number, width: number) => void;\n  /** Function called whenever selected cell is changed */\n  onSelectedCellChange?: (position: Position) => void;\n\n  /**\n   * Toggles and modes\n   */\n  /** Toggles whether filters row is displayed or not */\n  enableFilterRow?: boolean;\n  cellNavigationMode?: CellNavigationMode;\n  enableVirtualization?: boolean;\n\n  /**\n   * Miscellaneous\n   */\n  /** The node where the editor portal should mount. */\n  editorPortalTarget?: Element;\n  rowClass?: (row: R) => string | undefined;\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <DataGrid columns={columns} rows={rows} />\n*/\nfunction DataGrid<R, SR>({\n  // Grid and data Props\n  columns: rawColumns,\n  rows: rawRows,\n  summaryRows,\n  rowKeyGetter,\n  onRowsChange,\n  // Dimensions props\n  rowHeight = 35,\n  headerRowHeight = rowHeight,\n  headerFiltersHeight = 45,\n  summaryRowHeight = rowHeight,\n  // Feature props\n  selectedRows,\n  onSelectedRowsChange,\n  sortColumn,\n  sortDirection,\n  onSort,\n  filters,\n  onFiltersChange,\n  defaultColumnOptions,\n  groupBy: rawGroupBy,\n  rowGrouper,\n  expandedGroupIds,\n  onExpandedGroupIdsChange,\n  // Custom renderers\n  rowRenderer: RowRenderer = Row,\n  emptyRowsRenderer: EmptyRowsRenderer,\n  // Event props\n  onRowClick,\n  onScroll,\n  onColumnResize,\n  onSelectedCellChange,\n  onFill,\n  onPaste,\n  // Toggles and modes\n  enableFilterRow = false,\n  cellNavigationMode = 'NONE',\n  enableVirtualization = true,\n  // Miscellaneous\n  editorPortalTarget = body,\n  className,\n  style,\n  rowClass,\n  // ARIA\n  'aria-label': ariaLabel,\n  'aria-labelledby': ariaLabelledBy,\n  'aria-describedby': ariaDescribedBy\n}: DataGridProps<R, SR>, ref: React.Ref<DataGridHandle>) {\n  /**\n   * states\n   */\n  const [scrollTop, setScrollTop] = useState(0);\n  const [scrollLeft, setScrollLeft] = useState(0);\n  const [columnWidths, setColumnWidths] = useState<ReadonlyMap<string, number>>(() => new Map());\n  const [selectedPosition, setSelectedPosition] = useState<SelectCellState | EditCellState<R>>({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n  const [copiedCell, setCopiedCell] = useState<{ row: R; columnKey: string } | null>(null);\n  const [isDragging, setDragging] = useState(false);\n  const [draggedOverRowIdx, setOverRowIdx] = useState<number | undefined>(undefined);\n\n  /**\n   * refs\n   */\n  const focusSinkRef = useRef<HTMLDivElement>(null);\n  const prevSelectedPosition = useRef(selectedPosition);\n  const latestDraggedOverRowIdx = useRef(draggedOverRowIdx);\n  const lastSelectedRowIdx = useRef(-1);\n  const isCellFocusable = useRef(false);\n\n  /**\n   * The identity of the wrapper function is stable so it won't break memoization\n   */\n  const selectRowWrapper = useLatestFunc(selectRow);\n  const selectCellWrapper = useLatestFunc(selectCell);\n  const toggleGroupWrapper = useLatestFunc(toggleGroup);\n  const handleFormatterRowChangeWrapper = useLatestFunc(updateRow);\n\n  /**\n   * computed values\n   */\n  const [gridRef, gridWidth, gridHeight] = useGridDimensions();\n  const headerRowsCount = enableFilterRow ? 2 : 1;\n  const summaryRowsCount = summaryRows?.length ?? 0;\n  const totalHeaderHeight = headerRowHeight + (enableFilterRow ? headerFiltersHeight : 0);\n  const clientHeight = gridHeight - totalHeaderHeight - summaryRowsCount * summaryRowHeight;\n  const isSelectable = selectedRows !== undefined && onSelectedRowsChange !== undefined;\n\n  const { columns, viewportColumns, layoutCssVars, columnMetrics, totalColumnWidth, lastFrozenColumnIndex, totalFrozenColumnWidth, groupBy } = useViewportColumns({\n    rawColumns,\n    columnWidths,\n    scrollLeft,\n    viewportWidth: gridWidth,\n    defaultColumnOptions,\n    rawGroupBy: rowGrouper ? rawGroupBy : undefined,\n    enableVirtualization\n  });\n\n  const { rowOverscanStartIdx, rowOverscanEndIdx, rows, rowsCount, isGroupRow } = useViewportRows({\n    rawRows,\n    groupBy,\n    rowGrouper,\n    rowHeight,\n    clientHeight,\n    scrollTop,\n    expandedGroupIds,\n    enableVirtualization\n  });\n\n  const hasGroups = groupBy.length > 0 && typeof rowGrouper === 'function';\n  const minColIdx = hasGroups ? -1 : 0;\n\n  // Cell drag is not supported on a treegrid\n  const enableCellDragAndDrop = hasGroups ? false : onFill !== undefined;\n\n  /**\n   * effects\n   */\n  useLayoutEffect(() => {\n    if (selectedPosition === prevSelectedPosition.current || selectedPosition.mode === 'EDIT' || !isCellWithinBounds(selectedPosition)) return;\n    prevSelectedPosition.current = selectedPosition;\n    scrollToCell(selectedPosition);\n\n    if (isCellFocusable.current) {\n      isCellFocusable.current = false;\n      return;\n    }\n    focusSinkRef.current!.focus({ preventScroll: true });\n  });\n\n  useImperativeHandle(ref, () => ({\n    element: gridRef.current,\n    scrollToColumn(idx: number) {\n      scrollToCell({ idx });\n    },\n    scrollToRow(rowIdx: number) {\n      const { current } = gridRef;\n      if (!current) return;\n      current.scrollTo({\n        top: rowIdx * rowHeight,\n        behavior: 'smooth'\n      });\n    },\n    selectCell\n  }));\n\n  /**\n  * callbacks\n  */\n  const handleColumnResize = useCallback((column: CalculatedColumn<R, SR>, width: number) => {\n    setColumnWidths(columnWidths => {\n      const newColumnWidths = new Map(columnWidths);\n      newColumnWidths.set(column.key, width);\n      return newColumnWidths;\n    });\n\n    onColumnResize?.(column.idx, width);\n  }, [onColumnResize]);\n\n  const setDraggedOverRowIdx = useCallback((rowIdx?: number) => {\n    setOverRowIdx(rowIdx);\n    latestDraggedOverRowIdx.current = rowIdx;\n  }, []);\n\n  /**\n  * event handlers\n  */\n  function selectRow({ rowIdx, checked, isShiftClick }: SelectRowEvent) {\n    if (!onSelectedRowsChange) return;\n\n    assertIsValidKeyGetter(rowKeyGetter);\n    const newSelectedRows = new Set(selectedRows);\n    const row = rows[rowIdx];\n    if (isGroupRow(row)) {\n      for (const childRow of row.childRows) {\n        const rowKey = rowKeyGetter(childRow);\n        if (checked) {\n          newSelectedRows.add(rowKey);\n        } else {\n          newSelectedRows.delete(rowKey);\n        }\n      }\n      onSelectedRowsChange(newSelectedRows);\n      return;\n    }\n\n    const rowKey = rowKeyGetter(row);\n    if (checked) {\n      newSelectedRows.add(rowKey);\n      const previousRowIdx = lastSelectedRowIdx.current;\n      lastSelectedRowIdx.current = rowIdx;\n      if (isShiftClick && previousRowIdx !== -1 && previousRowIdx !== rowIdx) {\n        const step = Math.sign(rowIdx - previousRowIdx);\n        for (let i = previousRowIdx + step; i !== rowIdx; i += step) {\n          const row = rows[i];\n          if (isGroupRow(row)) continue;\n          newSelectedRows.add(rowKeyGetter(row));\n        }\n      }\n    } else {\n      newSelectedRows.delete(rowKey);\n      lastSelectedRowIdx.current = -1;\n    }\n\n    onSelectedRowsChange(newSelectedRows);\n  }\n\n  function toggleGroup(expandedGroupId: unknown) {\n    if (!onExpandedGroupIdsChange) return;\n    const newExpandedGroupIds = new Set(expandedGroupIds);\n    if (newExpandedGroupIds.has(expandedGroupId)) {\n      newExpandedGroupIds.delete(expandedGroupId);\n    } else {\n      newExpandedGroupIds.add(expandedGroupId);\n    }\n    onExpandedGroupIdsChange(newExpandedGroupIds);\n  }\n\n  function onGridFocus() {\n    if (!isCellWithinBounds(selectedPosition)) {\n      // Tabbing into the grid should initiate keyboard navigation\n      const initialPosition: SelectCellState = { idx: 0, rowIdx: 0, mode: 'SELECT' };\n      if (isCellWithinBounds(initialPosition)) {\n        setSelectedPosition(initialPosition);\n      }\n    } else {\n      // otherwise if we already have a selected cell, we should scroll back to it when focusing the grid\n      scrollToCell(selectedPosition);\n    }\n  }\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, keyCode } = event;\n    const row = rows[selectedPosition.rowIdx];\n\n    if (\n      onPaste\n      && isCtrlKeyHeldDown(event)\n      && isCellWithinBounds(selectedPosition)\n      && !isGroupRow(row)\n      && selectedPosition.idx !== -1\n      && selectedPosition.mode === 'SELECT'\n    ) {\n      // event.key may differ by keyboard input language, so we use event.keyCode instead\n      // event.nativeEvent.code cannot be used either as it would break copy/paste for the DVORAK layout\n      const cKey = 67;\n      const vKey = 86;\n      if (keyCode === cKey) {\n        handleCopy();\n        return;\n      }\n      if (keyCode === vKey) {\n        handlePaste();\n        return;\n      }\n    }\n\n    if (\n      isCellWithinBounds(selectedPosition)\n      && isGroupRow(row)\n      && selectedPosition.idx === -1\n      && (\n        // Collapse the current group row if it is focused and is in expanded state\n        (key === 'ArrowLeft' && row.isExpanded)\n        // Expand the current group row if it is focused and is in collapsed state\n        || (key === 'ArrowRight' && !row.isExpanded)\n      )) {\n      event.preventDefault(); // Prevents scrolling\n      toggleGroup(row.id);\n      return;\n    }\n\n    switch (event.key) {\n      case 'Escape':\n        setCopiedCell(null);\n        closeEditor();\n        return;\n      case 'ArrowUp':\n      case 'ArrowDown':\n      case 'ArrowLeft':\n      case 'ArrowRight':\n      case 'Tab':\n      case 'Home':\n      case 'End':\n      case 'PageUp':\n      case 'PageDown':\n        navigate(event);\n        break;\n      default:\n        handleCellInput(event);\n        break;\n    }\n  }\n\n  function handleFocus() {\n    isCellFocusable.current = true;\n  }\n\n  function handleScroll(event: React.UIEvent<HTMLDivElement>) {\n    const { scrollTop, scrollLeft } = event.currentTarget;\n    setScrollTop(scrollTop);\n    setScrollLeft(scrollLeft);\n    onScroll?.(event);\n  }\n\n  function getRawRowIdx(rowIdx: number) {\n    return hasGroups ? rawRows.indexOf(rows[rowIdx] as R) : rowIdx;\n  }\n\n  function updateRow(rowIdx: number, row: R) {\n    if (typeof onRowsChange !== 'function') return;\n    const updatedRows = [...rawRows];\n    updatedRows[rowIdx] = row;\n    onRowsChange(updatedRows, {\n      indexes: [rowIdx],\n      column: columns[selectedPosition.idx]\n    });\n  }\n\n  function commitEditorChanges() {\n    if (\n      columns[selectedPosition.idx]?.editor === undefined\n      || selectedPosition.mode === 'SELECT'\n      || selectedPosition.row === selectedPosition.originalRow) {\n      return;\n    }\n\n    const rowIdx = getRawRowIdx(selectedPosition.rowIdx);\n    updateRow(rowIdx, selectedPosition.row);\n  }\n\n  function handleCopy() {\n    const { idx, rowIdx } = selectedPosition;\n    setCopiedCell({ row: rawRows[getRawRowIdx(rowIdx)], columnKey: columns[idx].key });\n  }\n\n  function handlePaste() {\n    const { idx, rowIdx } = selectedPosition;\n    const targetRow = rawRows[getRawRowIdx(rowIdx)];\n    if (\n      !onPaste\n      || !onRowsChange\n      || copiedCell === null\n      || !isCellEditable(selectedPosition)\n    ) {\n      return;\n    }\n\n    const updatedTargetRow = onPaste({\n      sourceRow: copiedCell.row,\n      sourceColumnKey: copiedCell.columnKey,\n      targetRow,\n      targetColumnKey: columns[idx].key\n    });\n\n    updateRow(rowIdx, updatedTargetRow);\n  }\n\n  function handleCellInput(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (!isCellWithinBounds(selectedPosition)) return;\n    const row = rows[selectedPosition.rowIdx];\n    if (isGroupRow(row)) return;\n    const { key } = event;\n    const column = columns[selectedPosition.idx];\n\n    if (selectedPosition.mode === 'EDIT') {\n      if (key === 'Enter') {\n        // Custom editors can listen for the event and stop propagation to prevent commit\n        commitEditorChanges();\n        closeEditor();\n      }\n      return;\n    }\n\n    column.editorOptions?.onCellKeyDown?.(event);\n    if (event.isDefaultPrevented()) return;\n\n    if (isCellEditable(selectedPosition) && isDefaultCellInput(event)) {\n      setSelectedPosition(({ idx, rowIdx }) => ({\n        idx,\n        rowIdx,\n        key,\n        mode: 'EDIT',\n        row,\n        originalRow: row\n      }));\n    }\n  }\n\n  function handleDragEnd() {\n    const overRowIdx = latestDraggedOverRowIdx.current;\n    if (overRowIdx === undefined || !onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const startRowIndex = rowIdx < overRowIdx ? rowIdx + 1 : overRowIdx;\n    const endRowIndex = rowIdx < overRowIdx ? overRowIdx + 1 : rowIdx;\n    const targetRows = rawRows.slice(startRowIndex, endRowIndex);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = startRowIndex; i < endRowIndex; i++) {\n      updatedRows[i] = updatedTargetRows[i - startRowIndex];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  function handleMouseDown(event: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (event.buttons !== 1) return;\n    setDragging(true);\n    window.addEventListener('mouseover', onMouseOver);\n    window.addEventListener('mouseup', onMouseUp);\n\n    function onMouseOver(event: MouseEvent) {\n      // Trigger onMouseup in edge cases where we release the mouse button but `mouseup` isn't triggered,\n      // for example when releasing the mouse button outside the iframe the grid is rendered in.\n      // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n      if (event.buttons !== 1) onMouseUp();\n    }\n\n    function onMouseUp() {\n      window.removeEventListener('mouseover', onMouseOver);\n      window.removeEventListener('mouseup', onMouseUp);\n      setDragging(false);\n      handleDragEnd();\n    }\n  }\n\n  function handleDoubleClick(event: React.MouseEvent<HTMLDivElement>) {\n    event.stopPropagation();\n    if (!onFill || !onRowsChange) return;\n\n    const { idx, rowIdx } = selectedPosition;\n    const sourceRow = rawRows[rowIdx];\n    const targetRows = rawRows.slice(rowIdx + 1);\n    const column = columns[idx];\n    const updatedTargetRows = onFill({ columnKey: column.key, sourceRow, targetRows });\n    const updatedRows = [...rawRows];\n    const indexes: number[] = [];\n\n    for (let i = rowIdx + 1; i < updatedRows.length; i++) {\n      updatedRows[i] = updatedTargetRows[i - rowIdx - 1];\n      indexes.push(i);\n    }\n\n    onRowsChange(updatedRows, { indexes, column });\n  }\n\n  function handleEditorRowChange(row: Readonly<R>, commitChanges?: boolean) {\n    if (selectedPosition.mode === 'SELECT') return;\n    if (commitChanges) {\n      updateRow(getRawRowIdx(selectedPosition.rowIdx), row);\n      closeEditor();\n    } else {\n      setSelectedPosition(position => ({ ...position, row }));\n    }\n  }\n\n  function handleOnClose(commitChanges?: boolean) {\n    if (commitChanges) {\n      commitEditorChanges();\n    }\n    closeEditor();\n  }\n\n  /**\n   * utils\n   */\n  function isCellWithinBounds({ idx, rowIdx }: Position): boolean {\n    return rowIdx >= 0 && rowIdx < rows.length && idx >= minColIdx && idx < columns.length;\n  }\n\n  function isCellEditable(position: Position): boolean {\n    return isCellWithinBounds(position)\n      && isSelectedCellEditable<R, SR>({ columns, rows, selectedPosition: position, isGroupRow });\n  }\n\n  function selectCell(position: Position, enableEditor = false): void {\n    if (!isCellWithinBounds(position)) return;\n    commitEditorChanges();\n\n    if (enableEditor && isCellEditable(position)) {\n      const row = rows[position.rowIdx] as R;\n      setSelectedPosition({ ...position, mode: 'EDIT', key: null, row, originalRow: row });\n    } else {\n      setSelectedPosition({ ...position, mode: 'SELECT' });\n    }\n    onSelectedCellChange?.({ ...position });\n  }\n\n  function closeEditor() {\n    if (selectedPosition.mode === 'SELECT') return;\n    setSelectedPosition(({ idx, rowIdx }) => ({ idx, rowIdx, mode: 'SELECT' }));\n  }\n\n  function scrollToCell({ idx, rowIdx }: Partial<Position>): void {\n    const { current } = gridRef;\n    if (!current) return;\n\n    if (typeof idx === 'number' && idx > lastFrozenColumnIndex) {\n      const { clientWidth } = current;\n      const { left, width } = columnMetrics.get(columns[idx])!;\n      const isCellAtLeftBoundary = left < scrollLeft + totalFrozenColumnWidth;\n      const isCellAtRightBoundary = left + width > clientWidth + scrollLeft;\n      if (isCellAtLeftBoundary) {\n        current.scrollLeft = left - totalFrozenColumnWidth;\n      } else if (isCellAtRightBoundary) {\n        current.scrollLeft = left + width - clientWidth;\n      }\n    }\n\n    if (typeof rowIdx === 'number') {\n      if (rowIdx * rowHeight < scrollTop) {\n        // at top boundary, scroll to the row's top\n        current.scrollTop = rowIdx * rowHeight;\n      } else if ((rowIdx + 1) * rowHeight > scrollTop + clientHeight) {\n        // at bottom boundary, scroll the next row's top to the bottom of the viewport\n        current.scrollTop = (rowIdx + 1) * rowHeight - clientHeight;\n      }\n    }\n  }\n\n  function getNextPosition(key: string, ctrlKey: boolean, shiftKey: boolean): Position {\n    const { idx, rowIdx } = selectedPosition;\n    const row = rows[rowIdx];\n    const isRowSelected = isCellWithinBounds(selectedPosition) && idx === -1;\n\n    // If a group row is focused, and it is collapsed, move to the parent group row (if there is one).\n    if (\n      key === 'ArrowLeft'\n      && isRowSelected\n      && isGroupRow(row)\n      && !row.isExpanded\n      && row.level !== 0\n    ) {\n      let parentRowIdx = -1;\n      for (let i = selectedPosition.rowIdx - 1; i >= 0; i--) {\n        const parentRow = rows[i];\n        if (isGroupRow(parentRow) && parentRow.id === row.parentId) {\n          parentRowIdx = i;\n          break;\n        }\n      }\n      if (parentRowIdx !== -1) {\n        return { idx, rowIdx: parentRowIdx };\n      }\n    }\n\n    switch (key) {\n      case 'ArrowUp':\n        return { idx, rowIdx: rowIdx - 1 };\n      case 'ArrowDown':\n        return { idx, rowIdx: rowIdx + 1 };\n      case 'ArrowLeft':\n        return { idx: idx - 1, rowIdx };\n      case 'ArrowRight':\n        return { idx: idx + 1, rowIdx };\n      case 'Tab':\n        if (selectedPosition.idx === -1 && selectedPosition.rowIdx === -1) {\n          return shiftKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: 0, rowIdx: 0 };\n        }\n        return { idx: idx + (shiftKey ? -1 : 1), rowIdx };\n      case 'Home':\n        // If row is selected then move focus to the first row\n        if (isRowSelected) return { idx, rowIdx: 0 };\n        return ctrlKey ? { idx: 0, rowIdx: 0 } : { idx: 0, rowIdx };\n      case 'End':\n        // If row is selected then move focus to the last row.\n        if (isRowSelected) return { idx, rowIdx: rows.length - 1 };\n        return ctrlKey ? { idx: columns.length - 1, rowIdx: rows.length - 1 } : { idx: columns.length - 1, rowIdx };\n      case 'PageUp':\n        return { idx, rowIdx: rowIdx - Math.floor(clientHeight / rowHeight) };\n      case 'PageDown':\n        return { idx, rowIdx: rowIdx + Math.floor(clientHeight / rowHeight) };\n      default:\n        return selectedPosition;\n    }\n  }\n\n  function navigate(event: React.KeyboardEvent<HTMLDivElement>) {\n    if (selectedPosition.mode === 'EDIT') {\n      const onNavigation = columns[selectedPosition.idx].editorOptions?.onNavigation ?? onEditorNavigation;\n      if (!onNavigation(event)) return;\n    }\n    const { key, shiftKey } = event;\n    let mode = cellNavigationMode;\n    if (key === 'Tab') {\n      // If we are in a position to leave the grid, stop editing but stay in that cell\n      if (canExitGrid({ shiftKey, cellNavigationMode, columns, rowsCount: rows.length, selectedPosition })) {\n        commitEditorChanges();\n        // Allow focus to leave the grid so the next control in the tab order can be focused\n        return;\n      }\n\n      mode = cellNavigationMode === 'NONE'\n        ? 'CHANGE_ROW'\n        : cellNavigationMode;\n    }\n\n    // Do not allow focus to leave\n    event.preventDefault();\n\n    const ctrlKey = isCtrlKeyHeldDown(event);\n    let nextPosition = getNextPosition(key, ctrlKey, shiftKey);\n    nextPosition = getNextSelectedCellPosition({\n      columns,\n      rowsCount: rows.length,\n      cellNavigationMode: mode,\n      nextPosition\n    });\n\n    selectCell(nextPosition);\n  }\n\n  function getDraggedOverCellIdx(currentRowIdx: number): number | undefined {\n    if (draggedOverRowIdx === undefined) return;\n    const { rowIdx } = selectedPosition;\n\n    const isDraggedOver = rowIdx < draggedOverRowIdx\n      ? rowIdx < currentRowIdx && currentRowIdx <= draggedOverRowIdx\n      : rowIdx > currentRowIdx && currentRowIdx >= draggedOverRowIdx;\n\n    return isDraggedOver ? selectedPosition.idx : undefined;\n  }\n\n  function getSelectedCellProps(rowIdx: number): SelectedCellProps | EditCellProps<R> | undefined {\n    if (selectedPosition.rowIdx !== rowIdx) return;\n\n    if (selectedPosition.mode === 'EDIT') {\n      return {\n        mode: 'EDIT',\n        idx: selectedPosition.idx,\n        onKeyDown: handleKeyDown,\n        editorProps: {\n          editorPortalTarget,\n          rowHeight,\n          row: selectedPosition.row,\n          onRowChange: handleEditorRowChange,\n          onClose: handleOnClose\n        }\n      };\n    }\n\n    return {\n      mode: 'SELECT',\n      idx: selectedPosition.idx,\n      onFocus: handleFocus,\n      onKeyDown: handleKeyDown,\n      dragHandleProps: enableCellDragAndDrop && isCellEditable(selectedPosition)\n        ? { onMouseDown: handleMouseDown, onDoubleClick: handleDoubleClick }\n        : undefined\n    };\n  }\n\n  function getViewportRows() {\n    const rowElements = [];\n    let startRowIndex = 0;\n    for (let rowIdx = rowOverscanStartIdx; rowIdx <= rowOverscanEndIdx; rowIdx++) {\n      const row = rows[rowIdx];\n      const top = rowIdx * rowHeight + totalHeaderHeight;\n      if (isGroupRow(row)) {\n        ({ startRowIndex } = row);\n        rowElements.push(\n          <GroupRowRenderer<R, SR>\n            aria-level={row.level + 1} // aria-level is 1-based\n            aria-setsize={row.setSize}\n            aria-posinset={row.posInSet + 1} // aria-posinset is 1-based\n            aria-rowindex={headerRowsCount + startRowIndex + 1} // aria-rowindex is 1 based\n            key={row.id}\n            id={row.id}\n            groupKey={row.groupKey}\n            viewportColumns={viewportColumns}\n            childRows={row.childRows}\n            rowIdx={rowIdx}\n            top={top}\n            level={row.level}\n            isExpanded={row.isExpanded}\n            selectedCellIdx={selectedPosition.rowIdx === rowIdx ? selectedPosition.idx : undefined}\n            isRowSelected={isSelectable && row.childRows.every(cr => selectedRows?.has(rowKeyGetter!(cr)))}\n            onFocus={selectedPosition.rowIdx === rowIdx ? handleFocus : undefined}\n            onKeyDown={selectedPosition.rowIdx === rowIdx ? handleKeyDown : undefined}\n            selectCell={selectCellWrapper}\n            selectRow={selectRowWrapper}\n            toggleGroup={toggleGroupWrapper}\n          />\n        );\n        continue;\n      }\n\n      startRowIndex++;\n      let key: React.Key = hasGroups ? startRowIndex : rowIdx;\n      let isRowSelected = false;\n      if (typeof rowKeyGetter === 'function') {\n        key = rowKeyGetter(row);\n        isRowSelected = selectedRows?.has(key) ?? false;\n      }\n\n      rowElements.push(\n        <RowRenderer\n          aria-rowindex={headerRowsCount + (hasGroups ? startRowIndex : rowIdx) + 1} // aria-rowindex is 1 based\n          aria-selected={isSelectable ? isRowSelected : undefined}\n          key={key}\n          rowIdx={rowIdx}\n          row={row}\n          viewportColumns={viewportColumns}\n          isRowSelected={isRowSelected}\n          onRowClick={onRowClick}\n          rowClass={rowClass}\n          top={top}\n          copiedCellIdx={copiedCell !== null && copiedCell.row === row ? columns.findIndex(c => c.key === copiedCell.columnKey) : undefined}\n          draggedOverCellIdx={getDraggedOverCellIdx(rowIdx)}\n          setDraggedOverRowIdx={isDragging ? setDraggedOverRowIdx : undefined}\n          selectedCellProps={getSelectedCellProps(rowIdx)}\n          onRowChange={handleFormatterRowChangeWrapper}\n          selectCell={selectCellWrapper}\n          selectRow={selectRowWrapper}\n        />\n      );\n    }\n\n    return rowElements;\n  }\n\n  // Reset the positions if the current values are no longer valid. This can happen if a column or row is removed\n  if (selectedPosition.idx >= columns.length || selectedPosition.rowIdx >= rows.length) {\n    setSelectedPosition({ idx: -1, rowIdx: -1, mode: 'SELECT' });\n    setDraggedOverRowIdx(undefined);\n  }\n\n  if (selectedPosition.mode === 'EDIT' && rows[selectedPosition.rowIdx] !== selectedPosition.originalRow) {\n    // Discard changes if rows are updated from outside\n    closeEditor();\n  }\n\n  return (\n    <div\n      role={hasGroups ? 'treegrid' : 'grid'}\n      aria-label={ariaLabel}\n      aria-labelledby={ariaLabelledBy}\n      aria-describedby={ariaDescribedBy}\n      aria-multiselectable={isSelectable ? true : undefined}\n      aria-colcount={columns.length}\n      aria-rowcount={headerRowsCount + rowsCount + summaryRowsCount}\n      className={clsx(rootClassname, { [viewportDraggingClassname]: isDragging }, className)}\n      style={{\n        ...style,\n        '--header-row-height': `${headerRowHeight}px`,\n        '--filter-row-height': `${headerFiltersHeight}px`,\n        '--row-width': `${totalColumnWidth}px`,\n        '--row-height': `${rowHeight}px`,\n        '--summary-row-height': `${summaryRowHeight}px`,\n        ...layoutCssVars\n      } as unknown as React.CSSProperties}\n      ref={gridRef}\n      onScroll={handleScroll}\n    >\n      <HeaderRow<R, SR>\n        rowKeyGetter={rowKeyGetter}\n        rows={rawRows}\n        columns={viewportColumns}\n        onColumnResize={handleColumnResize}\n        allRowsSelected={selectedRows?.size === rawRows.length}\n        onSelectedRowsChange={onSelectedRowsChange}\n        sortColumn={sortColumn}\n        sortDirection={sortDirection}\n        onSort={onSort}\n      />\n      {enableFilterRow && (\n        <FilterRow<R, SR>\n          columns={viewportColumns}\n          filters={filters}\n          onFiltersChange={onFiltersChange}\n        />\n      )}\n      {rows.length === 0 && EmptyRowsRenderer ? <EmptyRowsRenderer /> : (\n        <>\n          <div\n            ref={focusSinkRef}\n            tabIndex={0}\n            className={focusSinkClassname}\n            onKeyDown={handleKeyDown}\n            onFocus={onGridFocus}\n          />\n          <div style={{ height: Math.max(rows.length * rowHeight, clientHeight) }} />\n          {getViewportRows()}\n          {summaryRows?.map((row, rowIdx) => (\n            <SummaryRow<R, SR>\n              aria-rowindex={headerRowsCount + rowsCount + rowIdx + 1}\n              key={rowIdx}\n              rowIdx={rowIdx}\n              row={row}\n              bottom={summaryRowHeight * (summaryRows.length - 1 - rowIdx)}\n              viewportColumns={viewportColumns}\n            />\n          ))}\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default forwardRef(DataGrid) as <R, SR = unknown>(props: DataGridProps<R, SR> & RefAttributes<DataGridHandle>) => JSX.Element;\n","import { css } from '@linaria/core';\nimport type { EditorProps } from '../types';\n\nconst textEditor = css`\n  appearance: none;\n\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  padding: 0px 6px 0 6px;\n  border: 2px solid #ccc;\n  vertical-align: top;\n  color: var(--color);\n  background-color: var(--background-color);\n\n  font-family: inherit;\n  font-size: var(--font-size);\n\n  &:focus {\n    border-color: var(--selection-color);\n    outline: none;\n  }\n\n  &::placeholder {\n    color: #999;\n    opacity: 1;\n  }\n`;\n\nexport const textEditorClassname = `rdg-text-editor ${textEditor}`;\n\nfunction autoFocusAndSelect(input: HTMLInputElement | null) {\n  input?.focus();\n  input?.select();\n}\n\nexport default function TextEditor<TRow, TSummaryRow = unknown>({\n  row,\n  column,\n  onRowChange,\n  onClose\n}: EditorProps<TRow, TSummaryRow>) {\n  return (\n    <input\n      className={textEditorClassname}\n      ref={autoFocusAndSelect}\n      value={row[column.key as keyof TRow] as unknown as string}\n      onChange={event => onRowChange({ ...row, [column.key]: event.target.value })}\n      onBlur={() => onClose(true)}\n    />\n  );\n}\n"],"names":["cell","cellClassname","cellFrozen","cellFrozenClassname","cellFrozenLast","cellFrozenLastClassname","cellSelected","cellSelectedClassname","root","rootClassname","focusSink","focusSinkClassname","viewportDragging","viewportDraggingClassname","groupRow","groupRowClassname","groupRowSelected","groupRowSelectedClassname","headerRowAndFilterRow","headerRow","headerRowClassname","filterRow","filterRowClassname","row","rowClassname","rowSelected","rowSelectedClassname","summaryRow","summaryRowClassname","useClickOutside","onClick","frameRequestRef","useRef","cancelAnimationFrameRequest","current","cancelAnimationFrame","undefined","onClickRef","Error","useEffect","onOutsideClick","onWindowCaptureClick","requestAnimationFrame","window","addEventListener","capture","removeEventListener","useGridDimensions","gridRef","gridWidth","setGridWidth","useState","gridHeight","setGridHeight","useLayoutEffect","ResizeObserver","resizeObserver","clientWidth","clientHeight","observe","disconnect","useFocusRef","isCellSelected","ref","focus","preventScroll","checkboxLabel","checkboxLabelClassname","checkboxInput","checkboxInputClassname","checkbox","checkboxClassname","checkboxLabelDisabled","checkboxLabelDisabledClassname","SelectCellFormatter","value","tabIndex","disabled","onChange","ariaLabel","ariaLabelledBy","inputRef","handleChange","e","target","checked","nativeEvent","shiftKey","_jsxs","clsx","_jsx","ValueFormatter","props","column","key","groupCellContent","groupCellContentClassname","caret","caretClassname","ToggleGroupFormatter","groupKey","isExpanded","toggleGroup","cellRef","handleKeyDown","d","stopPropagation","event","SELECT_COLUMN_KEY","SelectColumn","name","width","maxWidth","resizable","sortable","frozen","headerRenderer","allRowsSelected","onAllRowsSelectionChange","formatter","isRowSelected","onRowSelectionChange","groupFormatter","useViewportColumns","rawColumns","columnWidths","viewportWidth","scrollLeft","defaultColumnOptions","rawGroupBy","enableVirtualization","minColumnWidth","minWidth","defaultFormatter","defaultSortable","defaultResizable","columns","lastFrozenColumnIndex","groupBy","useMemo","map","rawColumn","rowGroup","includes","idx","isLastFrozenColumn","sort","aKey","frozenA","bKey","frozenB","indexOf","forEach","push","layoutCssVars","totalColumnWidth","totalFrozenColumnWidth","columnMetrics","Map","left","templateColumns","allocatedWidth","unassignedColumnsCount","getSpecifiedWidth","clampColumnWidth","set","unallocatedWidth","unallocatedColumnWidth","has","columnMetric","get","i","colOverscanStartIdx","colOverscanEndIdx","length","viewportLeft","viewportRight","lastColIdx","firstUnfrozenColumnIdx","Math","min","colVisibleStartIdx","colVisibleEndIdx","max","viewportColumns","colIdx","test","floor","parseInt","RENDER_BACTCH_SIZE","isReadonlyArray","arr","Array","isArray","useViewportRows","rawRows","rowHeight","scrollTop","rowGrouper","expandedGroupIds","groupedRows","rowsCount","groupRows","rows","groupByKey","remainingGroupByKeys","startRowIndex","groupRowsCount","groups","childRows","Object","entries","childGroups","childRowsCount","allGroupRows","Set","flattenedRows","expandGroup","parentId","level","keys","posInSet","id","setSize","add","isGroupRow","rowOverscanStartIdx","rowOverscanEndIdx","overscanThreshold","rowVisibleStartIdx","rowVisibleEndIdx","ceil","useLatestFunc","fn","useCallback","args","headerSortCell","headerSortCellClassname","headerSortName","headerSortNameClassname","SortableHeaderCell","onSort","sortColumn","sortDirection","children","sortText","sortDescendingFirst","direction","nonInputKeys","isCtrlKeyHeldDown","ctrlKey","metaKey","isDefaultCellInput","onEditorNavigation","HTMLInputElement","HTMLTextAreaElement","HTMLSelectElement","matches","isSelectedCellEditable","selectedPosition","rowIdx","editor","editable","getNextSelectedCellPosition","cellNavigationMode","nextPosition","columnsCount","isAfterLastColumn","isBeforeFirstColumn","isLastRow","isFirstRow","canExitGrid","atLastCellInRow","atFirstCellInRow","atLastRow","atFirstRow","assertIsValidKeyGetter","keyGetter","getCellStyle","gridColumnStart","getCellClassname","extraClasses","cellResizable","cellResizableClassname","getAriaSort","HeaderCell","onResize","onPointerDown","pointerType","buttons","currentTarget","pointerId","right","getBoundingClientRect","offset","clientX","onPointerMove","onPointerUp","preventDefault","getCell","className","headerCellClass","HeaderRow","rowKeyGetter","onSelectedRowsChange","onColumnResize","handleAllRowsSelectionChange","newSelectedRows","memo","FilterRow","filters","onFiltersChange","newFilters","filterRenderer","cellCopied","cellCopiedClassname","cellDraggedOver","cellDraggedOverClassname","cellDragHandle","cellDragHandleClassname","Cell","isCopied","isDraggedOver","dragHandleProps","onRowClick","onDoubleClick","onContextMenu","onRowChange","selectCell","selectRow","cellClass","selectCellWrapper","openEditor","handleClick","editorOptions","editOnClick","handleContextMenu","handleDoubleClick","handleRowChange","newRow","isShiftClick","forwardRef","editorContainer","editorContainerClassname","EditorContainer","onClickCapture","createPortal","editorPortalTarget","cellEditing","cellEditingClassname","EditCell","editorProps","dimensions","setDimensions","node","top","getCellContent","docTop","docLeft","document","scrollingElement","documentElement","gridLeft","gridTop","Row","cellRenderer","CellRenderer","copiedCellIdx","draggedOverCellIdx","selectedCellProps","rowClass","setDraggedOverRowIdx","onMouseEnter","ariaRowIndex","ariaSelected","handleDragEnter","mode","onKeyDown","onFocus","GroupCell","groupColumnIndex","toggleGroupWrapper","isLevelMatching","cursor","GroupedRow","selectedCellIdx","selectGroup","SummaryCell","summaryFormatter","SummaryFormatter","summaryCellClass","SummaryRow","bottom","body","globalThis","DataGrid","summaryRows","onRowsChange","headerRowHeight","headerFiltersHeight","summaryRowHeight","selectedRows","onExpandedGroupIdsChange","rowRenderer","RowRenderer","emptyRowsRenderer","EmptyRowsRenderer","onScroll","onSelectedCellChange","onFill","onPaste","enableFilterRow","style","ariaDescribedBy","setScrollTop","setScrollLeft","setColumnWidths","setSelectedPosition","copiedCell","setCopiedCell","isDragging","setDragging","draggedOverRowIdx","setOverRowIdx","focusSinkRef","prevSelectedPosition","latestDraggedOverRowIdx","lastSelectedRowIdx","isCellFocusable","selectRowWrapper","handleFormatterRowChangeWrapper","updateRow","headerRowsCount","summaryRowsCount","totalHeaderHeight","isSelectable","hasGroups","minColIdx","enableCellDragAndDrop","isCellWithinBounds","scrollToCell","useImperativeHandle","element","scrollToColumn","scrollToRow","scrollTo","behavior","handleColumnResize","newColumnWidths","childRow","rowKey","delete","previousRowIdx","step","sign","expandedGroupId","newExpandedGroupIds","onGridFocus","initialPosition","keyCode","cKey","vKey","handleCopy","handlePaste","closeEditor","navigate","handleCellInput","handleFocus","handleScroll","getRawRowIdx","updatedRows","indexes","commitEditorChanges","originalRow","columnKey","targetRow","isCellEditable","updatedTargetRow","sourceRow","sourceColumnKey","targetColumnKey","onCellKeyDown","isDefaultPrevented","handleDragEnd","overRowIdx","endRowIndex","targetRows","slice","updatedTargetRows","handleMouseDown","onMouseOver","onMouseUp","handleEditorRowChange","commitChanges","position","handleOnClose","enableEditor","isCellAtLeftBoundary","isCellAtRightBoundary","getNextPosition","parentRowIdx","parentRow","onNavigation","getDraggedOverCellIdx","currentRowIdx","getSelectedCellProps","onClose","onMouseDown","getViewportRows","rowElements","every","cr","findIndex","c","size","height","textEditor","textEditorClassname","autoFocusAndSelect","input","select","TextEditor"],"mappings":"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"}